{"version":3,"file":"router-sdk.cjs.development.js","sources":["../src/constants.ts","../src/approveAndCall.ts","../src/multicallExtended.ts","../src/paymentsExtended.ts","../node_modules/regenerator-runtime/runtime.js","../src/entities/mixedRoute/route.ts","../src/entities/mixedRoute/trade.ts","../src/entities/protocol.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/utils/encodeMixedRouteToPath.ts","../src/utils/index.ts","../src/swapRouter.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\nexport const ADDRESS_THIS = '0x0000000000000000000000000000000000000002'\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// = 1 << 23 or 100000000000000000000000\nexport const V2_FEE_PATH_PLACEHOLDER = 8388608\n","import { Interface } from '@ethersproject/abi'\nimport invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IApproveAndCall.sol/IApproveAndCall.json'\nimport { Currency, Percent, Token } from '@uniswap/sdk-core'\nimport {\n  MintSpecificOptions,\n  IncreaseSpecificOptions,\n  NonfungiblePositionManager,\n  Position,\n  toHex,\n} from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\n// condensed version of v3-sdk AddLiquidityOptions containing only necessary swap + add attributes\nexport type CondensedAddLiquidityOptions = Omit<MintSpecificOptions, 'createPool'> | IncreaseSpecificOptions\n\nexport enum ApprovalTypes {\n  NOT_REQUIRED = 0,\n  MAX = 1,\n  MAX_MINUS_ONE = 2,\n  ZERO_THEN_MAX = 3,\n  ZERO_THEN_MAX_MINUS_ONE = 4,\n}\n\n// type guard\nexport function isMint(options: CondensedAddLiquidityOptions): options is Omit<MintSpecificOptions, 'createPool'> {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class ApproveAndCall {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeApproveMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMax', [token.address])\n  }\n\n  public static encodeApproveMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMaxMinusOne', [token.address])\n  }\n\n  public static encodeApproveZeroThenMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMax', [token.address])\n  }\n\n  public static encodeApproveZeroThenMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMaxMinusOne', [token.address])\n  }\n\n  public static encodeCallPositionManager(calldatas: string[]): string {\n    invariant(calldatas.length > 0, 'NULL_CALLDATA')\n\n    if (calldatas.length == 1) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', calldatas)\n    } else {\n      const encodedMulticall = NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas])\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', [encodedMulticall])\n    }\n  }\n  /**\n   * Encode adding liquidity to a position in the nft manager contract\n   * @param position Forcasted position with expected amount out from swap\n   * @param minimalPosition Forcasted position with custom minimal token amounts\n   * @param addLiquidityOptions Options for adding liquidity\n   * @param slippageTolerance Defines maximum slippage\n   */\n  public static encodeAddLiquidity(\n    position: Position,\n    minimalPosition: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    slippageTolerance: Percent\n  ): string {\n    let { amount0: amount0Min, amount1: amount1Min } = position.mintAmountsWithSlippage(slippageTolerance)\n\n    // position.mintAmountsWithSlippage() can create amounts not dependenable in scenarios\n    // such as range orders. Allow the option to provide a position with custom minimum amounts\n    // for these scenarios\n    if (JSBI.lessThan(minimalPosition.amount0.quotient, amount0Min)) {\n      amount0Min = minimalPosition.amount0.quotient\n    }\n    if (JSBI.lessThan(minimalPosition.amount1.quotient, amount1Min)) {\n      amount1Min = minimalPosition.amount1.quotient\n    }\n\n    if (isMint(addLiquidityOptions)) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('mint', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          fee: position.pool.fee,\n          tickLower: position.tickLower,\n          tickUpper: position.tickUpper,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          recipient: addLiquidityOptions.recipient,\n        },\n      ])\n    } else {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('increaseLiquidity', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          tokenId: toHex(addLiquidityOptions.tokenId),\n        },\n      ])\n    }\n  }\n\n  public static encodeApprove(token: Currency, approvalType: ApprovalTypes): string {\n    switch (approvalType) {\n      case ApprovalTypes.MAX:\n        return ApproveAndCall.encodeApproveMax(token.wrapped)\n      case ApprovalTypes.MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveMaxMinusOne(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX:\n        return ApproveAndCall.encodeApproveZeroThenMax(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveZeroThenMaxMinusOne(token.wrapped)\n      default:\n        throw 'Error: invalid ApprovalType'\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh } from '@uniswap/sdk-core'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IMulticallExtended.sol/IMulticallExtended.json'\nimport { Multicall, toHex } from '@uniswap/v3-sdk'\n\n// deadline or previousBlockhash\nexport type Validation = BigintIsh | string\n\nfunction validateAndParseBytes32(bytes32: string): string {\n  if (!bytes32.match(/^0x[0-9a-fA-F]{64}$/)) {\n    throw new Error(`${bytes32} is not valid bytes32.`)\n  }\n\n  return bytes32.toLowerCase()\n}\n\nexport abstract class MulticallExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[], validation?: Validation): string {\n    // if there's no validation, we can just fall back to regular multicall\n    if (typeof validation === 'undefined') {\n      return Multicall.encodeMulticall(calldatas)\n    }\n\n    // if there is validation, we have to normalize calldatas\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    // this means the validation value should be a previousBlockhash\n    if (typeof validation === 'string' && validation.startsWith('0x')) {\n      const previousBlockhash = validateAndParseBytes32(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(bytes32,bytes[])', [\n        previousBlockhash,\n        calldatas,\n      ])\n    } else {\n      const deadline = toHex(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(uint256,bytes[])', [deadline, calldatas])\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Percent, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IPeripheryPaymentsWithFeeExtended.sol/IPeripheryPaymentsWithFeeExtended.json'\nimport { FeeOptions, Payments, toHex } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nfunction encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n\nexport abstract class PaymentsExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient?: string, feeOptions?: FeeOptions): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeUnwrapWETH9(amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9WithFee(uint256,uint256,address)', [\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9(uint256)', [toHex(amountMinimum)])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient?: string,\n    feeOptions?: FeeOptions\n  ): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeSweepToken(token, amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepTokenWithFee(address,uint256,uint256,address)', [\n        token.address,\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepToken(address,uint256)', [\n        token.address,\n        toHex(amountMinimum),\n      ])\n    }\n  }\n\n  public static encodePull(token: Token, amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('pull', [token.address, toHex(amount)])\n  }\n\n  public static encodeWrapETH(amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('wrapETH', [toHex(amount)])\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { Pair } from '@uniswap/v2-sdk'\n\ntype TPool = Pair | Pool\n\n/**\n * Represents a list of pools or pairs through which a swap can occur\n * @template TInput The input token\n * @template TOutput The output token\n */\nexport class MixedRouteSDK<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: TPool[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `TPool` objects (pools or pairs), ordered by the route the swap will take\n   * @param input The input token\n   * @param output The output token\n   */\n  public constructor(pools: TPool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every((pool) => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    const wrappedInput = input.wrapped\n    invariant(pools[0].involvesToken(wrappedInput), 'INPUT')\n\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [wrappedInput]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i]\n      invariant(currentInputToken.equals(pool.token0) || currentInputToken.equals(pool.token1), 'PATH')\n      const nextToken = currentInputToken.equals(pool.token0) ? pool.token1 : pool.token0\n      tokenPath.push(nextToken)\n    }\n\n    this.pools = pools\n    this.path = tokenPath\n    this.input = input\n    this.output = output ?? tokenPath[tokenPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price),\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price),\n            }\n      },\n      this.pools[0].token0.equals(this.input.wrapped)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price,\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price,\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n","import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { BestTradeOptions, Pool } from '@uniswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../../constants'\nimport { MixedRouteSDK } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: MixedRouteTrade<TInput, TOutput, TTradeType>,\n  b: MixedRouteTrade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.path.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.path.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @notice This class is functionally the same as the `Trade` class in the `@uniswap/v3-sdk` package, aside from typing and some input validation.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class MixedRouteTrade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): MixedRouteSDK<TInput, TOutput> {\n    invariant(this.swaps.length == 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: MixedRouteSDK<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: MixedRouteSDK<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<MixedRouteTrade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n\n    invariant(tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    invariant(amount.currency.equals(route.input), 'INPUT')\n    amounts[0] = amount.wrapped\n    for (let i = 0; i < route.path.length - 1; i++) {\n      const pool = route.pools[i]\n      const [outputAmount] = await pool.getOutputAmount(amounts[i])\n      amounts[i + 1] = outputAmount\n    }\n    inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n    outputAmount = CurrencyAmount.fromFractionalAmount(\n      route.output,\n      amounts[amounts.length - 1].numerator,\n      amounts[amounts.length - 1].denominator\n    )\n\n    return new MixedRouteTrade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType,\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: MixedRouteSDK<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<MixedRouteTrade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    invariant(tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      amounts[0] = CurrencyAmount.fromFractionalAmount(route.input.wrapped, amount.numerator, amount.denominator)\n\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new MixedRouteTrade({\n      routes: populatedRoutes,\n      tradeType,\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: MixedRouteSDK<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): MixedRouteTrade<TInput, TOutput, TTradeType> {\n    return new MixedRouteTrade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route,\n        },\n      ],\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): MixedRouteTrade<TInput, TOutput, TTradeType> {\n    return new MixedRouteTrade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType,\n  }: {\n    routes: {\n      route: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        pool instanceof Pool\n          ? poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, pool.fee))\n          : poolAddressSet.add(Pair.getAddress(pool.token0, pool.token1))\n      }\n    }\n\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n\n    invariant(tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    /// does not support exactOutput, as enforced in the constructor\n    const slippageAdjustedAmountOut = new Fraction(ONE)\n      .add(slippageTolerance)\n      .invert()\n      .multiply(amountOut.quotient).quotient\n    return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    return amountIn\n    /// does not support exactOutput\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: (Pool | Pair)[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: (Pool | Pair)[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: MixedRouteTrade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<MixedRouteTrade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.currency) && !pool.token1.equals(amountIn.currency)) continue\n      if (pool instanceof Pair) {\n        if ((pool as Pair).reserve0.equalTo(ZERO) || (pool as Pair).reserve1.equalTo(ZERO)) continue\n      }\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        // @ts-ignore[2571] error is unknown\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await MixedRouteTrade.fromRoute(\n            new MixedRouteSDK([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await MixedRouteTrade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","export enum Protocol {\n  V2 = 'V2',\n  V3 = 'V3',\n  MIXED = 'MIXED',\n}\n","// entities/route.ts\n\nimport { Route as V2RouteSDK, Pair } from '@uniswap/v2-sdk'\nimport { Route as V3RouteSDK, Pool } from '@uniswap/v3-sdk'\nimport { Protocol } from './protocol'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\nimport { MixedRouteSDK } from './mixedRoute/route'\n\nexport interface IRoute<TInput extends Currency, TOutput extends Currency, TPool extends Pool | Pair> {\n  protocol: Protocol\n  // array of pools if v3 or pairs if v2\n  pools: TPool[]\n  path: Token[]\n  midPrice: Price<TInput, TOutput>\n  input: TInput\n  output: TOutput\n}\n\n// V2 route wrapper\nexport class RouteV2<TInput extends Currency, TOutput extends Currency>\n  extends V2RouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pair>\n{\n  public readonly protocol: Protocol = Protocol.V2\n  public readonly pools: Pair[]\n\n  constructor(v2Route: V2RouteSDK<TInput, TOutput>) {\n    super(v2Route.pairs, v2Route.input, v2Route.output)\n    this.pools = this.pairs\n  }\n}\n\n// V3 route wrapper\nexport class RouteV3<TInput extends Currency, TOutput extends Currency>\n  extends V3RouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pool>\n{\n  public readonly protocol: Protocol = Protocol.V3\n  public readonly path: Token[]\n\n  constructor(v3Route: V3RouteSDK<TInput, TOutput>) {\n    super(v3Route.pools, v3Route.input, v3Route.output)\n    this.path = v3Route.tokenPath\n  }\n}\n\n// Mixed route wrapper\nexport class MixedRoute<TInput extends Currency, TOutput extends Currency>\n  extends MixedRouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pool | Pair>\n{\n  public readonly protocol: Protocol = Protocol.MIXED\n\n  constructor(mixedRoute: MixedRouteSDK<TInput, TOutput>) {\n    super(mixedRoute.pools, mixedRoute.input, mixedRoute.output)\n  }\n}\n","import { Currency, CurrencyAmount, Fraction, Percent, Price, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2RouteSDK, Trade as V2TradeSDK } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3RouteSDK, Trade as V3TradeSDK } from '@uniswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { MixedRouteSDK } from './mixedRoute/route'\nimport { MixedRouteTrade as MixedRouteTradeSDK } from './mixedRoute/trade'\nimport { IRoute, MixedRoute, RouteV2, RouteV3 } from './route'\n\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  public readonly routes: IRoute<TInput, TOutput, Pair | Pool>[]\n  public readonly tradeType: TTradeType\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade. May consist of swaps in v2 or v3.\n   */\n  public readonly swaps: {\n    route: IRoute<TInput, TOutput, Pair | Pool>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  //  construct a trade across v2 and v3 routes from pre-computed amounts\n  public constructor({\n    v2Routes,\n    v3Routes,\n    tradeType,\n    mixedRoutes,\n  }: {\n    v2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n    mixedRoutes?: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n  }) {\n    this.swaps = []\n    this.routes = []\n    // wrap v2 routes\n    for (const { routev2, inputAmount, outputAmount } of v2Routes) {\n      const route = new RouteV2(routev2)\n      this.routes.push(route)\n      this.swaps.push({\n        route,\n        inputAmount,\n        outputAmount,\n      })\n    }\n    // wrap v3 routes\n    for (const { routev3, inputAmount, outputAmount } of v3Routes) {\n      const route = new RouteV3(routev3)\n      this.routes.push(route)\n      this.swaps.push({\n        route,\n        inputAmount,\n        outputAmount,\n      })\n    }\n    // wrap mixedRoutes\n    if (mixedRoutes) {\n      for (const { mixedRoute, inputAmount, outputAmount } of mixedRoutes) {\n        const route = new MixedRoute(mixedRoute)\n        this.routes.push(route)\n        this.swaps.push({\n          route,\n          inputAmount,\n          outputAmount,\n        })\n      }\n    }\n    this.tradeType = tradeType\n\n    // each route must have the same input and output currency\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    invariant(\n      this.swaps.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      this.swaps.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    // pools must be unique inter protocols\n    const numPools = this.swaps.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of this.swaps) {\n      for (const pool of route.pools) {\n        if (pool instanceof Pool) {\n          poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, (pool as Pool).fee))\n        } else if (pool instanceof Pair) {\n          const pair = pool\n          poolAddressSet.add(Pair.getAddress(pair.token0, pair.token1))\n        } else {\n          throw new Error('Unexpected pool type in route when constructing trade object')\n        }\n      }\n    }\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n  }\n\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    v2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[],\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[],\n    tradeType: TTradeType,\n    mixedRoutes?: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[]\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedV2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    const populatedV3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    const populatedMixedRoutes: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { routev2, amount } of v2Routes) {\n      const v2Trade = new V2TradeSDK(routev2, amount, tradeType)\n      const { inputAmount, outputAmount } = v2Trade\n\n      populatedV2Routes.push({\n        routev2,\n        inputAmount,\n        outputAmount,\n      })\n    }\n\n    for (const { routev3, amount } of v3Routes) {\n      const v3Trade = await V3TradeSDK.fromRoute(routev3, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n\n      populatedV3Routes.push({\n        routev3,\n        inputAmount,\n        outputAmount,\n      })\n    }\n\n    if (mixedRoutes) {\n      for (const { mixedRoute, amount } of mixedRoutes) {\n        const mixedRouteTrade = await MixedRouteTradeSDK.fromRoute(mixedRoute, amount, tradeType)\n        const { inputAmount, outputAmount } = mixedRouteTrade\n\n        populatedMixedRoutes.push({\n          mixedRoute,\n          inputAmount,\n          outputAmount,\n        })\n      }\n    }\n\n    return new Trade({\n      v2Routes: populatedV2Routes,\n      v3Routes: populatedV3Routes,\n      mixedRoutes: populatedMixedRoutes,\n      tradeType,\n    })\n  }\n\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: V2RouteSDK<TInput, TOutput> | V3RouteSDK<TInput, TOutput> | MixedRouteSDK<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    let v2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    let v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    let mixedRoutes: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    if (route instanceof V2RouteSDK) {\n      const v2Trade = new V2TradeSDK(route, amount, tradeType)\n      const { inputAmount, outputAmount } = v2Trade\n      v2Routes = [{ routev2: route, inputAmount, outputAmount }]\n    } else if (route instanceof V3RouteSDK) {\n      const v3Trade = await V3TradeSDK.fromRoute(route, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n      v3Routes = [{ routev3: route, inputAmount, outputAmount }]\n    } else if (route instanceof MixedRouteSDK) {\n      const mixedRouteTrade = await MixedRouteTradeSDK.fromRoute(route, amount, tradeType)\n      const { inputAmount, outputAmount } = mixedRouteTrade\n      mixedRoutes = [{ mixedRoute: route, inputAmount, outputAmount }]\n    } else {\n      throw new Error('Invalid route type')\n    }\n\n    return new Trade({\n      v2Routes,\n      v3Routes,\n      mixedRoutes,\n      tradeType,\n    })\n  }\n}\n","import { pack } from '@ethersproject/solidity'\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { MixedRouteSDK } from '../entities/mixedRoute/route'\nimport { V2_FEE_PATH_PLACEHOLDER } from '../constants'\n\n/**\n * Converts a route to a hex encoded path\n * @notice only supports exactIn route encodings\n * @param route the mixed path to convert to an encoded path\n * @returns the exactIn encoded path\n */\nexport function encodeMixedRouteToPath(route: MixedRouteSDK<Currency, Currency>): string {\n  const firstInputToken: Token = route.input.wrapped\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool | Pair,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool instanceof Pool ? pool.fee : V2_FEE_PATH_PLACEHOLDER, outputToken.address],\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool instanceof Pool ? pool.fee : V2_FEE_PATH_PLACEHOLDER, outputToken.address],\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return pack(types, path)\n}\n","import { Currency, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { MixedRouteSDK } from '../entities/mixedRoute/route'\n\n/**\n * Utility function to return each consecutive section of Pools or Pairs in a MixedRoute\n * @param route\n * @returns a nested array of Pools or Pairs in the order of the route\n */\nexport const partitionMixedRouteByProtocol = (route: MixedRouteSDK<Currency, Currency>): (Pool | Pair)[][] => {\n  let acc = []\n\n  let left = 0\n  let right = 0\n  while (right < route.pools.length) {\n    if (\n      (route.pools[left] instanceof Pool && route.pools[right] instanceof Pair) ||\n      (route.pools[left] instanceof Pair && route.pools[right] instanceof Pool)\n    ) {\n      acc.push(route.pools.slice(left, right))\n      left = right\n    }\n    // seek forward with right pointer\n    right++\n    if (right === route.pools.length) {\n      /// we reached the end, take the rest\n      acc.push(route.pools.slice(left, right))\n    }\n  }\n  return acc\n}\n\n/**\n * Simple utility function to get the output of an array of Pools or Pairs\n * @param pools\n * @param firstInputToken\n * @returns the output token of the last pool in the array\n */\nexport const getOutputOfPools = (pools: (Pool | Pair)[], firstInputToken: Token): Token => {\n  const { inputToken: outputToken } = pools.reduce(\n    ({ inputToken }, pool: Pool | Pair): { inputToken: Token } => {\n      if (!pool.involvesToken(inputToken)) throw new Error('PATH')\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      return {\n        inputToken: outputToken,\n      }\n    },\n    { inputToken: firstInputToken }\n  )\n  return outputToken\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress, WETH9 } from '@uniswap/sdk-core'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/ISwapRouter02.sol/ISwapRouter02.json'\nimport { Trade as V2Trade } from '@uniswap/v2-sdk'\nimport {\n  encodeRouteToPath,\n  FeeOptions,\n  MethodParameters,\n  Payments,\n  PermitOptions,\n  Pool,\n  Position,\n  SelfPermit,\n  toHex,\n  Trade as V3Trade,\n} from '@uniswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { ADDRESS_THIS, MSG_SENDER } from './constants'\nimport { ApproveAndCall, ApprovalTypes, CondensedAddLiquidityOptions } from './approveAndCall'\nimport { Trade } from './entities/trade'\nimport { Protocol } from './entities/protocol'\nimport { MixedRoute, RouteV2, RouteV3 } from './entities/route'\nimport { MulticallExtended, Validation } from './multicallExtended'\nimport { PaymentsExtended } from './paymentsExtended'\nimport { MixedRouteTrade } from './entities/mixedRoute/trade'\nimport { encodeMixedRouteToPath } from './utils/encodeMixedRouteToPath'\nimport { MixedRouteSDK } from './entities/mixedRoute/route'\nimport { partitionMixedRouteByProtocol, getOutputOfPools } from './utils'\n\nconst ZERO = JSBI.BigInt(0)\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output. If omitted, output is sent to msg.sender.\n   */\n  recipient?: string\n\n  /**\n   * Either deadline (when the transaction expires, in epoch seconds), or previousBlockhash.\n   */\n  deadlineOrPreviousBlockhash?: Validation\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\nexport interface SwapAndAddOptions extends SwapOptions {\n  /**\n   * The optional permit parameters for pulling in remaining output token.\n   */\n  outputTokenPermit?: PermitOptions\n}\n\ntype AnyTradeType =\n  | Trade<Currency, Currency, TradeType>\n  | V2Trade<Currency, Currency, TradeType>\n  | V3Trade<Currency, Currency, TradeType>\n  | MixedRouteTrade<Currency, Currency, TradeType>\n  | (\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n    )[]\n\n/**\n * Represents the Uniswap V2 + V3 SwapRouter02, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * @notice Generates the calldata for a Swap with a V2 Route.\n   * @param trade The V2Trade to encode.\n   * @param options SwapOptions to use for the trade.\n   * @param routerMustCustody Flag for whether funds should be sent to the router\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\n   * @returns A string array of calldatas for the trade.\n   */\n  private static encodeV2Swap(\n    trade: V2Trade<Currency, Currency, TradeType>,\n    options: SwapOptions,\n    routerMustCustody: boolean,\n    performAggregatedSlippageCheck: boolean\n  ): string {\n    const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance).quotient)\n    const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance).quotient)\n\n    const path = trade.route.path.map((token) => token.address)\n    const recipient = routerMustCustody\n      ? ADDRESS_THIS\n      : typeof options.recipient === 'undefined'\n      ? MSG_SENDER\n      : validateAndParseAddress(options.recipient)\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      const exactInputParams = [amountIn, performAggregatedSlippageCheck ? 0 : amountOut, path, recipient]\n\n      return SwapRouter.INTERFACE.encodeFunctionData('swapExactTokensForTokens', exactInputParams)\n    } else {\n      const exactOutputParams = [amountOut, amountIn, path, recipient]\n\n      return SwapRouter.INTERFACE.encodeFunctionData('swapTokensForExactTokens', exactOutputParams)\n    }\n  }\n\n  /**\n   * @notice Generates the calldata for a Swap with a V3 Route.\n   * @param trade The V3Trade to encode.\n   * @param options SwapOptions to use for the trade.\n   * @param routerMustCustody Flag for whether funds should be sent to the router\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\n   * @returns A string array of calldatas for the trade.\n   */\n  private static encodeV3Swap(\n    trade: V3Trade<Currency, Currency, TradeType>,\n    options: SwapOptions,\n    routerMustCustody: boolean,\n    performAggregatedSlippageCheck: boolean\n  ): string[] {\n    const calldatas: string[] = []\n\n    for (const { route, inputAmount, outputAmount } of trade.swaps) {\n      const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n      const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n      // flag for whether the trade is single hop or not\n      const singleHop = route.pools.length === 1\n\n      const recipient = routerMustCustody\n        ? ADDRESS_THIS\n        : typeof options.recipient === 'undefined'\n        ? MSG_SENDER\n        : validateAndParseAddress(options.recipient)\n\n      if (singleHop) {\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          const exactInputSingleParams = {\n            tokenIn: route.tokenPath[0].address,\n            tokenOut: route.tokenPath[1].address,\n            fee: route.pools[0].fee,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n            sqrtPriceLimitX96: 0,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n        } else {\n          const exactOutputSingleParams = {\n            tokenIn: route.tokenPath[0].address,\n            tokenOut: route.tokenPath[1].address,\n            fee: route.pools[0].fee,\n            recipient,\n            amountOut,\n            amountInMaximum: amountIn,\n            sqrtPriceLimitX96: 0,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n        }\n      } else {\n        const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          const exactInputParams = {\n            path,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n        } else {\n          const exactOutputParams = {\n            path,\n            recipient,\n            amountOut,\n            amountInMaximum: amountIn,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n        }\n      }\n    }\n\n    return calldatas\n  }\n\n  /**\n   * @notice Generates the calldata for a MixedRouteSwap. Since single hop routes are not MixedRoutes, we will instead generate\n   *         them via the existing encodeV3Swap and encodeV2Swap methods.\n   * @param trade The MixedRouteTrade to encode.\n   * @param options SwapOptions to use for the trade.\n   * @param routerMustCustody Flag for whether funds should be sent to the router\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\n   * @returns A string array of calldatas for the trade.\n   */\n  private static encodeMixedRouteSwap(\n    trade: MixedRouteTrade<Currency, Currency, TradeType>,\n    options: SwapOptions,\n    routerMustCustody: boolean,\n    performAggregatedSlippageCheck: boolean\n  ): string[] {\n    const calldatas: string[] = []\n\n    invariant(trade.tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    for (const { route, inputAmount, outputAmount } of trade.swaps) {\n      const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n      const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n      // flag for whether the trade is single hop or not\n      const singleHop = route.pools.length === 1\n\n      const recipient = routerMustCustody\n        ? ADDRESS_THIS\n        : typeof options.recipient === 'undefined'\n        ? MSG_SENDER\n        : validateAndParseAddress(options.recipient)\n\n      const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n        return route.pools.every((pool) => pool instanceof Pool)\n      }\n\n      if (singleHop) {\n        /// For single hop, since it isn't really a mixedRoute, we'll just mimic behavior of V3 or V2\n        /// We don't use encodeV3Swap() or encodeV2Swap() because casting the trade to a V3Trade or V2Trade is overcomplex\n        if (mixedRouteIsAllV3(route)) {\n          const exactInputSingleParams = {\n            tokenIn: route.path[0].address,\n            tokenOut: route.path[1].address,\n            fee: (route.pools as Pool[])[0].fee,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n            sqrtPriceLimitX96: 0,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n        } else {\n          const path = route.path.map((token) => token.address)\n\n          const exactInputParams = [amountIn, performAggregatedSlippageCheck ? 0 : amountOut, path, recipient]\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('swapExactTokensForTokens', exactInputParams))\n        }\n      } else {\n        const sections = partitionMixedRouteByProtocol(route)\n\n        const isLastSectionInRoute = (i: number) => {\n          return i === sections.length - 1\n        }\n\n        let outputToken\n        let inputToken = route.input.wrapped\n\n        for (let i = 0; i < sections.length; i++) {\n          const section = sections[i]\n          /// Now, we get output of this section\n          outputToken = getOutputOfPools(section, inputToken)\n\n          const newRouteOriginal = new MixedRouteSDK(\n            [...section],\n            section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n            outputToken\n          )\n          const newRoute = new MixedRoute(newRouteOriginal)\n\n          /// Previous output is now input\n          inputToken = outputToken\n\n          if (mixedRouteIsAllV3(newRoute)) {\n            const path: string = encodeMixedRouteToPath(newRoute)\n            const exactInputParams = {\n              path,\n              // By default router holds funds until the last swap, then it is sent to the recipient\n              // special case exists where we are unwrapping WETH output, in which case `routerMustCustody` is set to true\n              // and router still holds the funds. That logic bundled into how the value of `recipient` is calculated\n              recipient: isLastSectionInRoute(i) ? recipient : ADDRESS_THIS,\n              amountIn: i == 0 ? amountIn : 0,\n              amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactInputParams = [\n              i == 0 ? amountIn : 0, // amountIn\n              !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n              newRoute.path.map((token) => token.address), // path\n              isLastSectionInRoute(i) ? recipient : ADDRESS_THIS, // to\n            ]\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('swapExactTokensForTokens', exactInputParams))\n          }\n        }\n      }\n    }\n\n    return calldatas\n  }\n\n  private static encodeSwaps(\n    trades: AnyTradeType,\n    options: SwapOptions,\n    isSwapAndAdd?: boolean\n  ): {\n    calldatas: string[]\n    sampleTrade:\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n    routerMustCustody: boolean\n    inputIsNative: boolean\n    outputIsNative: boolean\n    totalAmountIn: CurrencyAmount<Currency>\n    minimumAmountOut: CurrencyAmount<Currency>\n    quoteAmountOut: CurrencyAmount<Currency>\n  } {\n    // If dealing with an instance of the aggregated Trade object, unbundle it to individual trade objects.\n    if (trades instanceof Trade) {\n      invariant(\n        trades.swaps.every(\n          (swap) =>\n            swap.route.protocol == Protocol.V3 ||\n            swap.route.protocol == Protocol.V2 ||\n            swap.route.protocol == Protocol.MIXED\n        ),\n        'UNSUPPORTED_PROTOCOL'\n      )\n\n      let individualTrades: (\n        | V2Trade<Currency, Currency, TradeType>\n        | V3Trade<Currency, Currency, TradeType>\n        | MixedRouteTrade<Currency, Currency, TradeType>\n      )[] = []\n\n      for (const { route, inputAmount, outputAmount } of trades.swaps) {\n        if (route.protocol == Protocol.V2) {\n          individualTrades.push(\n            new V2Trade(\n              route as RouteV2<Currency, Currency>,\n              trades.tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n              trades.tradeType\n            )\n          )\n        } else if (route.protocol == Protocol.V3) {\n          individualTrades.push(\n            V3Trade.createUncheckedTrade({\n              route: route as RouteV3<Currency, Currency>,\n              inputAmount,\n              outputAmount,\n              tradeType: trades.tradeType,\n            })\n          )\n        } else if (route.protocol == Protocol.MIXED) {\n          individualTrades.push(\n            /// we can change the naming of this function on MixedRouteTrade if needed\n            MixedRouteTrade.createUncheckedTrade({\n              route: route as MixedRoute<Currency, Currency>,\n              inputAmount,\n              outputAmount,\n              tradeType: trades.tradeType,\n            })\n          )\n        } else {\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n        }\n      }\n      trades = individualTrades\n    }\n\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n\n    const numberOfTrades = trades.reduce(\n      (numberOfTrades, trade) =>\n        numberOfTrades + (trade instanceof V3Trade || trade instanceof MixedRouteTrade ? trade.swaps.length : 1),\n      0\n    )\n\n    const sampleTrade = trades[0]\n\n    // All trades should have the same starting/ending currency and trade type\n    invariant(\n      trades.every((trade) => trade.inputAmount.currency.equals(sampleTrade.inputAmount.currency)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every((trade) => trade.outputAmount.currency.equals(sampleTrade.outputAmount.currency)),\n      'TOKEN_OUT_DIFF'\n    )\n    invariant(\n      trades.every((trade) => trade.tradeType === sampleTrade.tradeType),\n      'TRADE_TYPE_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\n\n    // flag for whether we want to perform an aggregated slippage check\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck = sampleTrade.tradeType === TradeType.EXACT_INPUT && numberOfTrades > 2\n    // flag for whether funds should be send first to the router\n    //   1. when receiving ETH (which much be unwrapped from WETH)\n    //   2. when a fee on the output is being taken\n    //   3. when performing swap and add\n    //   4. when performing an aggregated slippage check\n    const routerMustCustody = outputIsNative || !!options.fee || !!isSwapAndAdd || performAggregatedSlippageCheck\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    for (const trade of trades) {\n      if (trade instanceof V2Trade) {\n        calldatas.push(SwapRouter.encodeV2Swap(trade, options, routerMustCustody, performAggregatedSlippageCheck))\n      } else if (trade instanceof V3Trade) {\n        for (const calldata of SwapRouter.encodeV3Swap(\n          trade,\n          options,\n          routerMustCustody,\n          performAggregatedSlippageCheck\n        )) {\n          calldatas.push(calldata)\n        }\n      } else if (trade instanceof MixedRouteTrade) {\n        for (const calldata of SwapRouter.encodeMixedRouteSwap(\n          trade,\n          options,\n          routerMustCustody,\n          performAggregatedSlippageCheck\n        )) {\n          calldatas.push(calldata)\n        }\n      } else {\n        throw new Error('Unsupported trade object')\n      }\n    }\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.outputAmount.currency, 0)\n\n    const minimumAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    const quoteAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.outputAmount),\n      ZERO_OUT\n    )\n\n    const totalAmountIn: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)),\n      ZERO_IN\n    )\n\n    return {\n      calldatas,\n      sampleTrade,\n      routerMustCustody,\n      inputIsNative,\n      outputIsNative,\n      totalAmountIn,\n      minimumAmountOut,\n      quoteAmountOut,\n    }\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades:\n      | Trade<Currency, Currency, TradeType>\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n      | (\n          | V2Trade<Currency, Currency, TradeType>\n          | V3Trade<Currency, Currency, TradeType>\n          | MixedRouteTrade<Currency, Currency, TradeType>\n        )[],\n    options: SwapOptions\n  ): MethodParameters {\n    const {\n      calldatas,\n      sampleTrade,\n      routerMustCustody,\n      inputIsNative,\n      outputIsNative,\n      totalAmountIn,\n      minimumAmountOut,\n    } = SwapRouter.encodeSwaps(trades, options)\n\n    // unwrap or sweep\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        calldatas.push(PaymentsExtended.encodeUnwrapWETH9(minimumAmountOut.quotient, options.recipient, options.fee))\n      } else {\n        calldatas.push(\n          PaymentsExtended.encodeSweepToken(\n            sampleTrade.outputAmount.currency.wrapped,\n            minimumAmountOut.quotient,\n            options.recipient,\n            options.fee\n          )\n        )\n      }\n    }\n\n    // must refund when paying in ETH: either with an uncertain input amount OR if there's a chance of a partial fill.\n    // unlike ERC20's, the full ETH value must be sent in the transaction, so the rest must be refunded.\n    if (inputIsNative && (sampleTrade.tradeType === TradeType.EXACT_OUTPUT || SwapRouter.riskOfPartialFill(trades))) {\n      calldatas.push(Payments.encodeRefundETH())\n    }\n\n    return {\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\n      value: toHex(inputIsNative ? totalAmountIn.quotient : ZERO),\n    }\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapAndAddCallParameters(\n    trades: AnyTradeType,\n    options: SwapAndAddOptions,\n    position: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    tokenInApprovalType: ApprovalTypes,\n    tokenOutApprovalType: ApprovalTypes\n  ): MethodParameters {\n    const {\n      calldatas,\n      inputIsNative,\n      outputIsNative,\n      sampleTrade,\n      totalAmountIn: totalAmountSwapped,\n      quoteAmountOut,\n      minimumAmountOut,\n    } = SwapRouter.encodeSwaps(trades, options, true)\n\n    // encode output token permit if necessary\n    if (options.outputTokenPermit) {\n      invariant(quoteAmountOut.currency.isToken, 'NON_TOKEN_PERMIT_OUTPUT')\n      calldatas.push(SelfPermit.encodePermit(quoteAmountOut.currency, options.outputTokenPermit))\n    }\n\n    const chainId = sampleTrade.route.chainId\n    const zeroForOne = position.pool.token0.wrapped.address === totalAmountSwapped.currency.wrapped.address\n    const { positionAmountIn, positionAmountOut } = SwapRouter.getPositionAmounts(position, zeroForOne)\n\n    // if tokens are native they will be converted to WETH9\n    const tokenIn = inputIsNative ? WETH9[chainId] : positionAmountIn.currency.wrapped\n    const tokenOut = outputIsNative ? WETH9[chainId] : positionAmountOut.currency.wrapped\n\n    // if swap output does not make up whole outputTokenBalanceDesired, pull in remaining tokens for adding liquidity\n    const amountOutRemaining = positionAmountOut.subtract(quoteAmountOut.wrapped)\n    if (amountOutRemaining.greaterThan(CurrencyAmount.fromRawAmount(positionAmountOut.currency, 0))) {\n      // if output is native, this means the remaining portion is included as native value in the transaction\n      // and must be wrapped. Otherwise, pull in remaining ERC20 token.\n      outputIsNative\n        ? calldatas.push(PaymentsExtended.encodeWrapETH(amountOutRemaining.quotient))\n        : calldatas.push(PaymentsExtended.encodePull(tokenOut, amountOutRemaining.quotient))\n    }\n\n    // if input is native, convert to WETH9, else pull ERC20 token\n    inputIsNative\n      ? calldatas.push(PaymentsExtended.encodeWrapETH(positionAmountIn.quotient))\n      : calldatas.push(PaymentsExtended.encodePull(tokenIn, positionAmountIn.quotient))\n\n    // approve token balances to NFTManager\n    if (tokenInApprovalType !== ApprovalTypes.NOT_REQUIRED)\n      calldatas.push(ApproveAndCall.encodeApprove(tokenIn, tokenInApprovalType))\n    if (tokenOutApprovalType !== ApprovalTypes.NOT_REQUIRED)\n      calldatas.push(ApproveAndCall.encodeApprove(tokenOut, tokenOutApprovalType))\n\n    // represents a position with token amounts resulting from a swap with maximum slippage\n    // hence the minimal amount out possible.\n    const minimalPosition = Position.fromAmounts({\n      pool: position.pool,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper,\n      amount0: zeroForOne ? position.amount0.quotient.toString() : minimumAmountOut.quotient.toString(),\n      amount1: zeroForOne ? minimumAmountOut.quotient.toString() : position.amount1.quotient.toString(),\n      useFullPrecision: false,\n    })\n\n    // encode NFTManager add liquidity\n    calldatas.push(\n      ApproveAndCall.encodeAddLiquidity(position, minimalPosition, addLiquidityOptions, options.slippageTolerance)\n    )\n\n    // sweep remaining tokens\n    inputIsNative\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenIn, ZERO))\n    outputIsNative\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenOut, ZERO))\n\n    let value: JSBI\n    if (inputIsNative) {\n      value = totalAmountSwapped.wrapped.add(positionAmountIn.wrapped).quotient\n    } else if (outputIsNative) {\n      value = amountOutRemaining.quotient\n    } else {\n      value = ZERO\n    }\n\n    return {\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\n      value: value.toString(),\n    }\n  }\n\n  // if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\n  private static riskOfPartialFill(trades: AnyTradeType): boolean {\n    if (Array.isArray(trades)) {\n      return trades.some((trade) => {\n        return SwapRouter.v3TradeWithHighPriceImpact(trade)\n      })\n    } else {\n      return SwapRouter.v3TradeWithHighPriceImpact(trades)\n    }\n  }\n\n  private static v3TradeWithHighPriceImpact(\n    trade:\n      | Trade<Currency, Currency, TradeType>\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n  ): boolean {\n    return !(trade instanceof V2Trade) && trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n  }\n\n  private static getPositionAmounts(\n    position: Position,\n    zeroForOne: boolean\n  ): {\n    positionAmountIn: CurrencyAmount<Currency>\n    positionAmountOut: CurrencyAmount<Currency>\n  } {\n    const { amount0, amount1 } = position.mintAmounts\n    const currencyAmount0 = CurrencyAmount.fromRawAmount(position.pool.token0, amount0)\n    const currencyAmount1 = CurrencyAmount.fromRawAmount(position.pool.token1, amount1)\n\n    const [positionAmountIn, positionAmountOut] = zeroForOne\n      ? [currencyAmount0, currencyAmount1]\n      : [currencyAmount1, currencyAmount0]\n    return { positionAmountIn, positionAmountOut }\n  }\n}\n"],"names":["MSG_SENDER","ADDRESS_THIS","ZERO","JSBI","BigInt","ONE","V2_FEE_PATH_PLACEHOLDER","ApprovalTypes","isMint","options","Object","keys","some","k","ApproveAndCall","encodeApproveMax","token","INTERFACE","encodeFunctionData","address","encodeApproveMaxMinusOne","encodeApproveZeroThenMax","encodeApproveZeroThenMaxMinusOne","encodeCallPositionManager","calldatas","length","invariant","encodedMulticall","NonfungiblePositionManager","encodeAddLiquidity","position","minimalPosition","addLiquidityOptions","slippageTolerance","mintAmountsWithSlippage","amount0Min","amount0","amount1Min","amount1","lessThan","quotient","token0","pool","token1","fee","tickLower","tickUpper","toHex","recipient","tokenId","encodeApprove","approvalType","MAX","wrapped","MAX_MINUS_ONE","ZERO_THEN_MAX","ZERO_THEN_MAX_MINUS_ONE","Interface","abi","validateAndParseBytes32","bytes32","match","Error","toLowerCase","MulticallExtended","encodeMulticall","validation","Multicall","Array","isArray","startsWith","previousBlockhash","deadline","encodeFeeBips","multiply","PaymentsExtended","encodeUnwrapWETH9","amountMinimum","feeOptions","Payments","feeBips","feeRecipient","validateAndParseAddress","encodeSweepToken","encodePull","amount","encodeWrapETH","undefined","MixedRouteSDK","pools","input","output","chainId","allOnSameChain","every","wrappedInput","involvesToken","tokenPath","entries","i","currentInputToken","equals","nextToken","push","path","_midPrice","price","slice","reduce","nextInput","token0Price","token1Price","Price","denominator","numerator","tradeComparator","a","b","inputAmount","currency","outputAmount","equalTo","aHops","swaps","total","cur","route","bHops","MixedRouteTrade","routes","tradeType","inputCurrency","outputCurrency","numPools","map","poolAddressSet","Set","Pool","add","getAddress","Pair","size","TradeType","EXACT_INPUT","fromRoute","amounts","getOutputAmount","CurrencyAmount","fromFractionalAmount","fromRoutes","populatedRoutes","createUncheckedTrade","constructorArguments","createUncheckedTradeWithMultipleRoutes","minimumAmountOut","amountOut","slippageAdjustedAmountOut","Fraction","invert","fromRawAmount","maximumAmountIn","amountIn","worstExecutionPrice","bestTradeExactIn","currencyAmountIn","currencyOut","currentPools","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","reserve0","reserve1","isInsufficientInputAmountError","isToken","sortedInsert","poolsExcludingThisPool","concat","_inputAmount","totalInputFromRoutes","_outputAmount","totalOutputFromRoutes","_executionPrice","_priceImpact","spotOutputAmount","midPrice","quote","priceImpact","subtract","divide","Percent","Protocol","RouteV2","v2Route","pairs","V2","V2RouteSDK","RouteV3","v3Route","V3","V3RouteSDK","MixedRoute","mixedRoute","MIXED","Trade","v2Routes","v3Routes","mixedRoutes","routev2","routev3","pair","EXACT_OUTPUT","slippageAdjustedAmountIn","populatedV2Routes","populatedV3Routes","populatedMixedRoutes","v2Trade","V2TradeSDK","V3TradeSDK","v3Trade","MixedRouteTradeSDK","mixedRouteTrade","encodeMixedRouteToPath","firstInputToken","index","inputToken","types","outputToken","pack","partitionMixedRouteByProtocol","acc","left","right","getOutputOfPools","REFUND_ETH_PRICE_IMPACT_THRESHOLD","SwapRouter","encodeV2Swap","trade","routerMustCustody","performAggregatedSlippageCheck","exactInputParams","exactOutputParams","encodeV3Swap","singleHop","exactInputSingleParams","tokenIn","amountOutMinimum","sqrtPriceLimitX96","exactOutputSingleParams","amountInMaximum","encodeRouteToPath","encodeMixedRouteSwap","mixedRouteIsAllV3","sections","isLastSectionInRoute","section","newRouteOriginal","newRoute","encodeSwaps","trades","isSwapAndAdd","swap","protocol","individualTrades","V2Trade","V3Trade","numberOfTrades","sampleTrade","inputIsNative","isNative","outputIsNative","inputTokenPermit","SelfPermit","encodePermit","calldata","ZERO_IN","ZERO_OUT","sum","quoteAmountOut","totalAmountIn","swapCallParameters","riskOfPartialFill","encodeRefundETH","deadlineOrPreviousBlockhash","value","swapAndAddCallParameters","tokenInApprovalType","tokenOutApprovalType","totalAmountSwapped","outputTokenPermit","zeroForOne","getPositionAmounts","positionAmountIn","positionAmountOut","WETH9","amountOutRemaining","greaterThan","NOT_REQUIRED","Position","fromAmounts","toString","useFullPrecision","v3TradeWithHighPriceImpact","mintAmounts","currencyAmount0","currencyAmount1"],"mappings":"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"}