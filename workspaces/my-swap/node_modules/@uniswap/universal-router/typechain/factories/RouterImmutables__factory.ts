/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RouterImmutables } from "../RouterImmutables";

export class RouterImmutables__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    params: {
      permit2: string;
      weth9: string;
      seaport: string;
      nftxZap: string;
      x2y2: string;
      foundation: string;
      sudoswap: string;
      nft20Zap: string;
      cryptopunks: string;
      looksRare: string;
      routerRewardsDistributor: string;
      looksRareRewardsDistributor: string;
      looksRareToken: string;
      v2Factory: string;
      v3Factory: string;
      pairInitCodeHash: BytesLike;
      poolInitCodeHash: BytesLike;
    },
    overrides?: Overrides
  ): Promise<RouterImmutables> {
    return super.deploy(params, overrides || {}) as Promise<RouterImmutables>;
  }
  getDeployTransaction(
    params: {
      permit2: string;
      weth9: string;
      seaport: string;
      nftxZap: string;
      x2y2: string;
      foundation: string;
      sudoswap: string;
      nft20Zap: string;
      cryptopunks: string;
      looksRare: string;
      routerRewardsDistributor: string;
      looksRareRewardsDistributor: string;
      looksRareToken: string;
      v2Factory: string;
      v3Factory: string;
      pairInitCodeHash: BytesLike;
      poolInitCodeHash: BytesLike;
    },
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  attach(address: string): RouterImmutables {
    return super.attach(address) as RouterImmutables;
  }
  connect(signer: Signer): RouterImmutables__factory {
    return super.connect(signer) as RouterImmutables__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterImmutables {
    return new Contract(address, _abi, signerOrProvider) as RouterImmutables;
  }
}

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "permit2",
            type: "address",
          },
          {
            internalType: "address",
            name: "weth9",
            type: "address",
          },
          {
            internalType: "address",
            name: "seaport",
            type: "address",
          },
          {
            internalType: "address",
            name: "nftxZap",
            type: "address",
          },
          {
            internalType: "address",
            name: "x2y2",
            type: "address",
          },
          {
            internalType: "address",
            name: "foundation",
            type: "address",
          },
          {
            internalType: "address",
            name: "sudoswap",
            type: "address",
          },
          {
            internalType: "address",
            name: "nft20Zap",
            type: "address",
          },
          {
            internalType: "address",
            name: "cryptopunks",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRare",
            type: "address",
          },
          {
            internalType: "address",
            name: "routerRewardsDistributor",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRareRewardsDistributor",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRareToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "v2Factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "v3Factory",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pairInitCodeHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "poolInitCodeHash",
            type: "bytes32",
          },
        ],
        internalType: "struct RouterParameters",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x346102b4576001600160401b036102df388190036102a0601f8201601f19168101908482119082101761029e576102209282916040526102a039126102b4576040519061022082019081118282101761029e576040526100606102a06102b9565b80825261006e6102c06102b9565b602083015261007e6102e06102b9565b604083015261008e6103006102b9565b606083015261009e6103206102b9565b60808301526100ae6103406102b9565b60a08301526100be6103606102b9565b60c08301526100ce6103806102b9565b60e08301526100de6103a06102b9565b6101008301526100ef6103c06102b9565b6101208301526101006103e06102b9565b6101408301526101116104006102b9565b6101608301526101226104206102b9565b6101808301526101336104406102b9565b6101a08301526101446104606102b9565b6101c0838101918252610480516101e08086019182526104a0516102008088019182526001600160a01b0396871660a09081526020890151881660809081526040808b01518a1660c090815260608c01518b1660e0908152928c01518b16610100908152938c01518b16610120908152908c01518b16610140908152928c01518b16610160908152938c01518b16610180908152908c01518b166101a0908152908c01518b16909852918a01518916909452928801518716905292909501518416610220525161024090815291519092166102609081529151610280908152925160119390929091846102ce853960805184505060a05184505060c05184505060e05184505061010051845050610120518450506101405184505061016051845050610180518450506101a0518450506101c0518450506101e0518450506102005184505061022051845050518350505182505051815050f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b03821682036102b45756fe600080fdfea164736f6c6343000811000a";
