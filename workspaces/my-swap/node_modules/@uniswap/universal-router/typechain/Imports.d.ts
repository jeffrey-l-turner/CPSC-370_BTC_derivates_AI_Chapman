/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ImportsInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address,address)": FunctionFragment;
    "approve(address,address,uint160,uint48)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "invalidateNonces(address,address,uint48)": FunctionFragment;
    "invalidateUnorderedNonces(uint256,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lockdown(tuple[])": FunctionFragment;
    "nonceBitmap(address,uint256)": FunctionFragment;
    "permit(address,tuple,bytes)": FunctionFragment;
    "permitTransferFrom(tuple,tuple,address,bytes)": FunctionFragment;
    "permitWitnessTransferFrom(tuple,tuple,address,bytes32,string,bytes)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferFrom(tuple[])": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateNonces",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateUnorderedNonces",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockdown",
    values: [{ token: string; spender: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceBitmap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFrom",
    values: [
      {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      { to: string; requestedAmount: BigNumberish },
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitWitnessTransferFrom",
    values: [
      {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      { to: string; requestedAmount: BigNumberish },
      string,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      { from: string; to: string; amount: BigNumberish; token: string }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateUnorderedNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitWitnessTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "Approval(address,address,address,uint160,uint48)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Lockdown(address,address,address)": EventFragment;
    "NonceInvalidation(address,address,address,uint48,uint48)": EventFragment;
    "Permit(address,address,address,uint160,uint48,uint48)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "UnorderedNonceInvalidation(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lockdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceInvalidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Permit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnorderedNonceInvalidation"): EventFragment;
}

export class Imports extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ImportsInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    allowance(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      expiration: number;
      nonce: number;
      0: BigNumber;
      1: number;
      2: number;
    }>;

    "allowance(address,address,address)"(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      expiration: number;
      nonce: number;
      0: BigNumber;
      1: number;
      2: number;
    }>;

    approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,address,uint160,uint48)"(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    invalidateNonces(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "invalidateNonces(address,address,uint48)"(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lockdown(
      approvals: { token: string; spender: string }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockdown(tuple[])"(
      approvals: { token: string; spender: string }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "permit(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "transferFrom(tuple[])"(
      transferDetails: {
        from: string;
        to: string;
        amount: BigNumberish;
        token: string;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint160,address)"(
      from: string,
      to: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    arg0: string,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    expiration: number;
    nonce: number;
    0: BigNumber;
    1: number;
    2: number;
  }>;

  "allowance(address,address,address)"(
    arg0: string,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    expiration: number;
    nonce: number;
    0: BigNumber;
    1: number;
    2: number;
  }>;

  approve(
    token: string,
    spender: string,
    amount: BigNumberish,
    expiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,address,uint160,uint48)"(
    token: string,
    spender: string,
    amount: BigNumberish,
    expiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  invalidateNonces(
    token: string,
    spender: string,
    newNonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "invalidateNonces(address,address,uint48)"(
    token: string,
    spender: string,
    newNonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  invalidateUnorderedNonces(
    wordPos: BigNumberish,
    mask: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "invalidateUnorderedNonces(uint256,uint256)"(
    wordPos: BigNumberish,
    mask: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockdown(
    approvals: { token: string; spender: string }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockdown(tuple[])"(
    approvals: { token: string; spender: string }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nonceBitmap(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonceBitmap(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "permit(address,(tuple[],address,uint256),bytes)"(
    owner: string,
    permitBatch: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      }[];
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
    owner: string,
    permitSingle: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      };
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish };
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish },
    owner: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish }[];
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish }[],
    owner: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish };
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish },
    owner: string,
    witness: BytesLike,
    witnessTypeString: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish }[];
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish }[],
    owner: string,
    witness: BytesLike,
    witnessTypeString: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "transferFrom(tuple[])"(
    transferDetails: {
      from: string;
      to: string;
      amount: BigNumberish;
      token: string;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint160,address)"(
    from: string,
    to: string,
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      expiration: number;
      nonce: number;
      0: BigNumber;
      1: number;
      2: number;
    }>;

    "allowance(address,address,address)"(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      expiration: number;
      nonce: number;
      0: BigNumber;
      1: number;
      2: number;
    }>;

    approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,address,uint160,uint48)"(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    invalidateNonces(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "invalidateNonces(address,address,uint48)"(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockdown(
      approvals: { token: string; spender: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "lockdown(tuple[])"(
      approvals: { token: string; spender: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permit(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(tuple[])"(
      transferDetails: {
        from: string;
        to: string;
        amount: BigNumberish;
        token: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint160,address)"(
      from: string,
      to: string,
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      token: string | null,
      spender: string | null,
      amount: null,
      expiration: null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Lockdown(owner: string | null, token: null, spender: null): EventFilter;

    NonceInvalidation(
      owner: string | null,
      token: string | null,
      spender: string | null,
      newNonce: null,
      oldNonce: null
    ): EventFilter;

    Permit(
      owner: string | null,
      token: string | null,
      spender: string | null,
      amount: null,
      expiration: null,
      nonce: null
    ): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      amounts: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      amount: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;

    UnorderedNonceInvalidation(
      owner: string | null,
      word: null,
      mask: null
    ): EventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address,address)"(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,address,uint160,uint48)"(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidateNonces(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "invalidateNonces(address,address,uint48)"(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockdown(
      approvals: { token: string; spender: string }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lockdown(tuple[])"(
      approvals: { token: string; spender: string }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permit(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferFrom(tuple[])"(
      transferDetails: {
        from: string;
        to: string;
        amount: BigNumberish;
        token: string;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint160,address)"(
      from: string,
      to: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address,address)"(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,address,uint160,uint48)"(
      token: string,
      spender: string,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidateNonces(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "invalidateNonces(address,address,uint48)"(
      token: string,
      spender: string,
      newNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockdown(
      approvals: { token: string; spender: string }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockdown(tuple[])"(
      approvals: { token: string; spender: string }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permit(address,(tuple[],address,uint256),bytes)"(
      owner: string,
      permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(tuple[])"(
      transferDetails: {
        from: string;
        to: string;
        amount: BigNumberish;
        token: string;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint160,address)"(
      from: string,
      to: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
