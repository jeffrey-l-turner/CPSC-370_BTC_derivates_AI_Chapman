/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISignatureTransferInterface extends ethers.utils.Interface {
  functions: {
    "invalidateUnorderedNonces(uint256,uint256)": FunctionFragment;
    "nonceBitmap(address,uint256)": FunctionFragment;
    "permitTransferFrom(tuple,tuple,address,bytes)": FunctionFragment;
    "permitWitnessTransferFrom(tuple,tuple,address,bytes32,string,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "invalidateUnorderedNonces",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceBitmap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFrom",
    values: [
      {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      { to: string; requestedAmount: BigNumberish },
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitWitnessTransferFrom",
    values: [
      {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      { to: string; requestedAmount: BigNumberish },
      string,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "invalidateUnorderedNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonceBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitWitnessTransferFrom",
    data: BytesLike
  ): Result;

  events: {
    "UnorderedNonceInvalidation(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UnorderedNonceInvalidation"): EventFragment;
}

export class ISignatureTransfer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISignatureTransferInterface;

  functions: {
    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  invalidateUnorderedNonces(
    wordPos: BigNumberish,
    mask: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "invalidateUnorderedNonces(uint256,uint256)"(
    wordPos: BigNumberish,
    mask: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nonceBitmap(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonceBitmap(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish };
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish },
    owner: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish }[];
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish }[],
    owner: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish };
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish },
    owner: string,
    witness: BytesLike,
    witnessTypeString: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish }[];
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish }[],
    owner: string,
    witness: BytesLike,
    witnessTypeString: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    UnorderedNonceInvalidation(
      owner: string | null,
      word: null,
      mask: null
    ): EventFilter;
  };

  estimateGas: {
    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "invalidateUnorderedNonces(uint256,uint256)"(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonceBitmap(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
