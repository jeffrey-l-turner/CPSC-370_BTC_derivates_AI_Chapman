{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/swapRouter.ts","../src/utils/permit2.ts","../src/entities/NFTTrade.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRare.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n\n  // NFT-related command types\n  SEAPORT = 0x10,\n  LOOKS_RARE_721 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  LOOKS_RARE_1155 = 0x14,\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n}\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details, address spender, uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details, address spender, uint256 sigDeadline)'\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTABLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_721,\n  CommandType.LOOKS_RARE_1155,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n])\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  [CommandType.PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: ['bytes'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.SEAPORT]: ['uint256', 'bytes'],\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.LOOKS_RARE_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTABLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  switch (chainId) {\n    case 1:\n      return '0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B'\n    case 5:\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 137:\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 10:\n      return '0xb555edF5dcF85f42cEeF1f3630a52A108E55A654'\n    case 42161:\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 42220:\n      return '0xC73d61d192FB994157168Fb56730FdEc64C9Cb8F'\n    default:\n      throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  }\n}\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\nexport const ADDRESS_THIS = '0x0000000000000000000000000000000000000002'\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/permit2'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, TradeConfig } from '../Command'\nimport { MSG_SENDER, ADDRESS_THIS, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ADDRESS_THIS,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? MSG_SENDER\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ADDRESS_THIS : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ADDRESS_THIS, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Token } from '@uniswap/sdk-core'\nimport { NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/permit2'\nimport { ETH_ADDRESS } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(\n    trades: NFTTrade<SupportedProtocolsData>[],\n    config: SwapRouterConfig\n  ): MethodParameters {\n    invariant(!!config.sender, 'SENDER_REQUIRED')\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, config.sender, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in options\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n    if (options.inputTokenPermit && inputCurrency instanceof Token) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toString() }\n  }\n}\n","import { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport function encodePermit(planner: RoutePlanner, permit: Permit2Permit): void {\n  planner.addCommand(CommandType.PERMIT, [permit, permit.signature])\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, TradeConfig } from './Command'\nimport { LooksRareData } from './protocols/looksRare'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareData\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  abstract getTotalPrice(): BigNumberish\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRare = 'looksrare',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport abi from '../../../abis/LooksRare.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type MakerOrder = {\n  collection: string\n  tokenId: BigNumberish\n  isOrderAsk: true\n  signer: string\n  strategy: string\n  currency: string\n  amount: BigNumberish\n  price: BigNumberish\n  minPercentageToAsk: BigNumberish\n  nonce: BigNumberish\n  startTime: BigNumberish\n  endTime: BigNumberish\n  v: BigNumberish\n  r: string\n  s: string\n  params: string\n}\n\nexport type TakerOrder = {\n  minPercentageToAsk: BigNumberish\n  price: BigNumberish\n  taker: string\n  tokenId: BigNumberish\n  isOrderAsk: boolean\n  params: string\n}\n\nexport type LooksRareData = {\n  makerOrder: MakerOrder\n  takerOrder: TakerOrder\n  recipient: string\n  tokenType: TokenType\n}\n\nexport class LooksRareTrade extends NFTTrade<LooksRareData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: LooksRareData[]) {\n    super(Market.LooksRare, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = LooksRareTrade.INTERFACE.encodeFunctionData('matchAskWithTakerBidUsingETHAndWETH', [\n        item.takerOrder,\n        item.makerOrder,\n      ])\n\n      if (item.tokenType == TokenType.ERC721) {\n        invariant(item.makerOrder.amount == 1, 'ERC721 token amount must be 1')\n        planner.addCommand(\n          CommandType.LOOKS_RARE_721,\n          [item.makerOrder.price, calldata, item.recipient, item.makerOrder.collection, item.makerOrder.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.LOOKS_RARE_1155,\n          [\n            item.makerOrder.price,\n            calldata,\n            item.recipient,\n            item.makerOrder.collection,\n            item.makerOrder.tokenId,\n            item.makerOrder.amount,\n          ],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.makerOrder.collection,\n        tokenId: item.makerOrder.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.makerOrder.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { Ether } from '@uniswap/sdk-core'\n\nexport type NFTXData = {\n  recipient: string\n  vaultAddress: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        [Ether.onChain(1).wrapped.address, order.vaultAddress],\n        order.recipient,\n      ])\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Seaport.json'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n      planner.addCommand(CommandType.SEAPORT, [this.getTotalPrice().toString(), calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration))\n      }\n    }\n    return totalPrice\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder; value: BigNumber } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    const value = this.calculateValue(data.parameters.consideration)\n    return { advancedOrder, value }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[]): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) => amt.add(consideration.startAmount),\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n"],"names":["CommandType","REVERTABLE_COMMANDS","Set","SEAPORT","NFTX","LOOKS_RARE_721","LOOKS_RARE_1155","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","ABI_DEFINITION","PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","TRANSFER","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","PAY_PORTION","OWNER_CHECK_721","OWNER_CHECK_1155","CRYPTOPUNKS","RoutePlanner","this","commands","inputs","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CONTRACT_BALANCE","BigNumber","from","pow","ADDRESS_THIS","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","outputIsNative","outputAmount","inputIsNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","length","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","priceImpact","greaterThan","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","SwapRouter","swapNFTCallParameters","trades","config","sender","invariant","totalPrice","orders","add","getTotalPrice","encodePlan","swapERC20CallParameters","inputCurrency","inputTokenPermit","Token","permit","signature","encodePermit","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","Interface","abi","Market","TokenType","NFTTrade","market","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","_proto","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareTrade","LooksRare","takerOrder","makerOrder","amount","collection","ERC1155","NFT20Trade","order","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","Ether","onChain","vaultAddress","SeaportTrade","Seaport","advancedOrders","orderFulfillments","items","_","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","offer","token","identifierOrCriteria","calculateValue","consideration","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","chainId"],"mappings":"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"}