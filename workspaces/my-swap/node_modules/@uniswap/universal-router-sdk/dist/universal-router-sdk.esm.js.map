{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/permit2.ts","../src/swapRouter.ts","../src/entities/NFTTrade.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRare.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n\n  // NFT-related command types\n  SEAPORT = 0x10,\n  LOOKS_RARE_721 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  LOOKS_RARE_1155 = 0x14,\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n}\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details, address spender, uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details, address spender, uint256 sigDeadline)'\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTABLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_721,\n  CommandType.LOOKS_RARE_1155,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n])\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  [CommandType.PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: ['bytes'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.SEAPORT]: ['uint256', 'bytes'],\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.LOOKS_RARE_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTABLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  switch (chainId) {\n    case 1:\n      return '0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B'\n    case 5:\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 137:\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 10:\n      return '0xb555edF5dcF85f42cEeF1f3630a52A108E55A654'\n    case 42161:\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 42220:\n      return '0xC73d61d192FB994157168Fb56730FdEc64C9Cb8F'\n    default:\n      throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  }\n}\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\nexport const ADDRESS_THIS = '0x0000000000000000000000000000000000000002'\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/permit2'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, TradeConfig } from '../Command'\nimport { MSG_SENDER, ADDRESS_THIS, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ADDRESS_THIS,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? MSG_SENDER\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ADDRESS_THIS : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ADDRESS_THIS, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport function encodePermit(planner: RoutePlanner, permit: Permit2Permit): void {\n  planner.addCommand(CommandType.PERMIT, [permit, permit.signature])\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Token } from '@uniswap/sdk-core'\nimport { NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/permit2'\nimport { ETH_ADDRESS } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(\n    trades: NFTTrade<SupportedProtocolsData>[],\n    config: SwapRouterConfig\n  ): MethodParameters {\n    invariant(!!config.sender, 'SENDER_REQUIRED')\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, config.sender, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in options\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n    if (options.inputTokenPermit && inputCurrency instanceof Token) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toString() }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, TradeConfig } from './Command'\nimport { LooksRareData } from './protocols/looksRare'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareData\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  abstract getTotalPrice(): BigNumberish\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRare = 'looksrare',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport abi from '../../../abis/LooksRare.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type MakerOrder = {\n  collection: string\n  tokenId: BigNumberish\n  isOrderAsk: true\n  signer: string\n  strategy: string\n  currency: string\n  amount: BigNumberish\n  price: BigNumberish\n  minPercentageToAsk: BigNumberish\n  nonce: BigNumberish\n  startTime: BigNumberish\n  endTime: BigNumberish\n  v: BigNumberish\n  r: string\n  s: string\n  params: string\n}\n\nexport type TakerOrder = {\n  minPercentageToAsk: BigNumberish\n  price: BigNumberish\n  taker: string\n  tokenId: BigNumberish\n  isOrderAsk: boolean\n  params: string\n}\n\nexport type LooksRareData = {\n  makerOrder: MakerOrder\n  takerOrder: TakerOrder\n  recipient: string\n  tokenType: TokenType\n}\n\nexport class LooksRareTrade extends NFTTrade<LooksRareData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: LooksRareData[]) {\n    super(Market.LooksRare, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = LooksRareTrade.INTERFACE.encodeFunctionData('matchAskWithTakerBidUsingETHAndWETH', [\n        item.takerOrder,\n        item.makerOrder,\n      ])\n\n      if (item.tokenType == TokenType.ERC721) {\n        invariant(item.makerOrder.amount == 1, 'ERC721 token amount must be 1')\n        planner.addCommand(\n          CommandType.LOOKS_RARE_721,\n          [item.makerOrder.price, calldata, item.recipient, item.makerOrder.collection, item.makerOrder.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.LOOKS_RARE_1155,\n          [\n            item.makerOrder.price,\n            calldata,\n            item.recipient,\n            item.makerOrder.collection,\n            item.makerOrder.tokenId,\n            item.makerOrder.amount,\n          ],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.makerOrder.collection,\n        tokenId: item.makerOrder.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.makerOrder.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { Ether } from '@uniswap/sdk-core'\n\nexport type NFTXData = {\n  recipient: string\n  vaultAddress: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        [Ether.onChain(1).wrapped.address, order.vaultAddress],\n        order.recipient,\n      ])\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Seaport.json'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n      planner.addCommand(CommandType.SEAPORT, [this.getTotalPrice().toString(), calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration))\n      }\n    }\n    return totalPrice\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder; value: BigNumber } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    const value = this.calculateValue(data.parameters.consideration)\n    return { advancedOrder, value }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[]): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) => amt.add(consideration.startAmount),\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n"],"names":["CommandType","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","ALLOW_REVERT_FLAG","REVERTABLE_COMMANDS","Set","SEAPORT","NFTX","LOOKS_RARE_721","LOOKS_RARE_1155","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","ABI_DEFINITION","PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","TRANSFER","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","PAY_PORTION","OWNER_CHECK_721","OWNER_CHECK_1155","CRYPTOPUNKS","RoutePlanner","commands","inputs","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","UNIVERSAL_ROUTER_ADDRESS","chainId","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","MSG_SENDER","ADDRESS_THIS","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","length","outputIsNative","outputAmount","inputIsNative","routerMustCustody","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","riskOfPartialFill","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","encodePermit","permit","signature","SwapRouter","swapNFTCallParameters","trades","config","sender","invariant","totalPrice","orders","add","getTotalPrice","encodePlan","swapERC20CallParameters","inputCurrency","inputTokenPermit","Token","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","Interface","abi","NFTTrade","market","Market","TokenType","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareTrade","LooksRare","takerOrder","makerOrder","amount","collection","ERC1155","NFT20Trade","order","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","Ether","onChain","vaultAddress","SeaportTrade","Seaport","advancedOrders","orderFulfillments","items","_","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","offer","token","identifierOrCriteria","calculateValue","consideration","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount"],"mappings":"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"}