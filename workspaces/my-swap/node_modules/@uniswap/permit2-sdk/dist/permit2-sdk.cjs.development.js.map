{"version":3,"file":"permit2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["PERMIT2_ADDRESS","MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","PERMIT2_DOMAIN_NAME","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","isPermit","permit","Array","isArray","details","AllowanceTransfer","getPermitData","gte","sigDeadline","invariant","domain","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","permitTransferFromWithWitnessType","witness","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitBatchTransferFromWithWitnessType","PermitBatchWitnessTransferFrom","isPermitTransferFrom","permitted","SignatureTransfer","deadline","validateTokenPermissions","Object","assign","permissions","AllowanceProvider","provider","permit2","Contract","Permit2Abi","getAllowanceData","token","owner","spender","allowance","getAllowance","getNonce","getExpiration"],"mappings":"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"}