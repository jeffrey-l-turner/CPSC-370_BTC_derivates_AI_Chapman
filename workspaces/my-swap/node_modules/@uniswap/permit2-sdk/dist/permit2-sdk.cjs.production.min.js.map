{"version":3,"file":"permit2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","AllowanceTransfer","getPermitData","permit","gte","sigDeadline","invariant","domain","Array","isArray","details","isPermit","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","SignatureTransfer","witness","deadline","permitted","isPermitTransferFrom","validateTokenPermissions","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitTransferFromWithWitnessType","Object","assign","PermitBatchWitnessTransferFrom","permitBatchTransferFromWithWitnessType","permissions","provider","this","permit2","Contract","Permit2Abi","_proto","getAllowanceData","token","owner","spender","_context","allowance","getAllowance","_context2","getNonce","_context3","getExpiration","_context4"],"mappings":"sQAIaA,EAAYC,YAAUC,KAAK,kBAC3BC,EAAaF,YAAUC,KAAK,8CAC5BE,EAAaH,YAAUC,KAAK,sEAI5BG,EAA6BF,EAC7BG,EAAyBN,EACzBO,EAAkBP,EAGlBQ,EAA6BJ,EAC7BK,EAAoBL,EACpBM,EAAiBN,EAEjBO,EAA+BV,YAAUC,KAAK,YCf3CU,EAAcC,EAAwBC,GACpD,MAAO,CACLC,KAJwB,UAKxBD,QAAAA,EACAE,kBAAmBH,OC8BjBI,EAAiB,CACrB,CAAEF,KAAM,QAASG,KAAM,WACvB,CAAEH,KAAM,SAAUG,KAAM,WACxB,CAAEH,KAAM,aAAcG,KAAM,UAC5B,CAAEH,KAAM,QAASG,KAAM,WAGnBC,EAAe,CACnBC,aAAc,CACZ,CAAEL,KAAM,UAAWG,KAAM,iBACzB,CAAEH,KAAM,UAAWG,KAAM,WACzB,CAAEH,KAAM,cAAeG,KAAM,YAE/BG,cAAeJ,GAGXK,EAAqB,CACzBC,YAAa,CACX,CAAER,KAAM,UAAWG,KAAM,mBACzB,CAAEH,KAAM,UAAWG,KAAM,WACzB,CAAEH,KAAM,cAAeG,KAAM,YAE/BG,cAAeJ,GAOKO,aAIpB,cAgCC,OA7BDA,EACcC,cAAP,SACLC,EACAb,EACAC,GAEUJ,EAAeiB,IAAID,EAAOE,cAApCC,MAEA,IAAMC,EAASlB,EAAcC,EAAgBC,GAC7C,OApBJ,SAAkBY,GAChB,OAAQK,MAAMC,QAAQN,EAAOO,SAmBvBC,CAASR,IACXS,EAAsBT,EAAOO,SACtB,CACLH,OAAAA,EACAM,MAAOjB,EACPkB,OAAQX,KAGVA,EAAOO,QAAQK,QAAQH,GAChB,CACLL,OAAAA,EACAM,MAAOd,EACPe,OAAQX,KAGbF,EAEae,KAAP,SAAYb,EAAoCb,EAAwBC,GAC7E,MAAkCU,EAAkBC,cAAcC,EAAQb,EAAgBC,GAC1F,OAAO0B,oBAAkBD,OADjBT,SAAQM,QAAOC,cAK3B,SAASF,EAAsBF,GACnB1B,EAAgBoB,IAAIM,EAAQQ,QAAtCZ,MACUxB,EAA2BsB,IAAIM,EAAQS,SAAjDb,MACUvB,EAAuBqB,IAAIM,EAAQU,aAA7Cd,k2NCjEIe,EAAoB,CACxB,CAAE7B,KAAM,QAASG,KAAM,WACvB,CAAEH,KAAM,SAAUG,KAAM,YAGpB2B,EAA6B,CACjCC,mBAAoB,CAClB,CAAE/B,KAAM,YAAaG,KAAM,oBAC3B,CAAEH,KAAM,UAAWG,KAAM,WACzB,CAAEH,KAAM,QAASG,KAAM,WACvB,CAAEH,KAAM,WAAYG,KAAM,YAE5B6B,iBAAkBH,GAGdI,EAAmC,CACvCC,wBAAyB,CACvB,CAAElC,KAAM,YAAaG,KAAM,sBAC3B,CAAEH,KAAM,UAAWG,KAAM,WACzB,CAAEH,KAAM,QAASG,KAAM,WACvB,CAAEH,KAAM,WAAYG,KAAM,YAE5B6B,iBAAkBH,GAmCEM,aAIpB,cA2CC,OAxCDA,EACczB,cAAP,SACLC,EACAb,EACAC,EACAqC,GAEUzC,EAAeiB,IAAID,EAAO0B,WAApCvB,MACUpB,EAAkBkB,IAAID,EAAOe,QAAvCZ,MAEA,IAAMC,EAASlB,EAAcC,EAAgBC,GAC7C,OAtBJ,SAA8BY,GAC5B,OAAQK,MAAMC,QAAQN,EAAO2B,WAqBvBC,CAAqB5B,IACvB6B,EAAyB7B,EAAO2B,WAGzB,CACLvB,OAAAA,EACAM,MAJYe,EApDpB,SAA2CA,GACzC,UACEK,0BAA2B,CACzB,CAAEzC,KAAM,YAAaG,KAAM,oBAC3B,CAAEH,KAAM,UAAWG,KAAM,WACzB,CAAEH,KAAM,QAASG,KAAM,WACvB,CAAEH,KAAM,WAAYG,KAAM,WAC1B,CAAEH,KAAM,UAAWG,KAAMiC,EAAQM,kBAEnCV,iBAAkBH,GACfO,EAAQO,aA0CeC,CAAkCR,GAAWN,EAKnER,OAJac,EAAUS,OAAOC,OAAOnC,EAAQ,CAAEyB,QAASA,EAAQA,UAAazB,KAO/EA,EAAO2B,UAAUf,QAAQiB,GAGlB,CACLzB,OAAAA,EACAM,MAJYe,EA/CpB,SAAgDA,GAC9C,UACEW,+BAAgC,CAC9B,CAAE/C,KAAM,YAAaG,KAAM,sBAC3B,CAAEH,KAAM,UAAWG,KAAM,WACzB,CAAEH,KAAM,QAASG,KAAM,WACvB,CAAEH,KAAM,WAAYG,KAAM,WAC1B,CAAEH,KAAM,UAAWG,KAAMiC,EAAQM,kBAEnCV,iBAAkBH,GACfO,EAAQO,aAqCeK,CAAuCZ,GAAWH,EAKxEX,OAJac,EAAUS,OAAOC,OAAOnC,EAAQ,CAAEyB,QAASA,EAAQA,UAAazB,KAOlFwB,EAEaX,KAAP,SACLb,EACAb,EACAC,EACAqC,GAEA,MAAkCD,EAAkBzB,cAAcC,EAAQb,EAAgBC,EAASqC,GACnG,OAAOX,oBAAkBD,OADjBT,SAAQM,QAAOC,cAK3B,SAASkB,EAAyBS,GACtBxD,EAA2BmB,IAAIqC,EAAYtB,SAArDb,4oSC1IA,WAAoBoC,EAA4BpD,GAA5BqD,cAAAD,EAA4BC,oBAAArD,EAC9CqD,KAAKC,QAAU,IAAIC,WAASF,KAAKrD,eAAgBwD,EAAYH,KAAKD,UACnE,kBAgBA,OAhBAK,EAEKC,4BAAgB,kBAAtB,WAAuBC,EAAeC,EAAeC,GAAe,6BAAA,OAAA,sBAAA,OAAA,OAAAC,SACrDT,KAAKC,QAAQS,UAAUH,EAAOD,EAAOE,GAAQ,OAAA,iCAAA,OAAA,UAAA,+BAC3D,OAAA,gBAAA,mCAAAJ,EAEKO,wBAAY,kBAAlB,WAAmBL,EAAeC,EAAeC,GAAe,6BAAA,OAAA,sBAAA,OAAA,OAAAI,SAChDZ,KAAKK,iBAAiBC,EAAOC,EAAOC,GAAQ,OAAA,gCAAEhC,QAAM,OAAA,UAAA,+BACnE,OAAA,gBAAA,mCAAA4B,EAEKS,oBAAQ,kBAAd,WAAeP,EAAeC,EAAeC,GAAe,6BAAA,OAAA,sBAAA,OAAA,OAAAM,SAC5Cd,KAAKK,iBAAiBC,EAAOC,EAAOC,GAAQ,OAAA,gCAAEjC,OAAK,OAAA,UAAA,+BAClE,OAAA,gBAAA,mCAAA6B,EAEKW,yBAAa,kBAAnB,WAAoBT,EAAeC,EAAeC,GAAe,6BAAA,OAAA,sBAAA,OAAA,OAAAQ,SACjDhB,KAAKK,iBAAiBC,EAAOC,EAAOC,GAAQ,OAAA,gCAAE/B,YAAU,OAAA,UAAA,+BACvE,OAAA,gBAAA,gXJ9B4B"}