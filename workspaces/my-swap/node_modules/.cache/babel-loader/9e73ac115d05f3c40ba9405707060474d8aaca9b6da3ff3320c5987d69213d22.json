{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: true,\n      applicationSecretKey: null\n    };\n    // Parse applicationId and applicationSecretKey\n    if (apiKey == null) {\n      apiKeyObj.applicationId = defaultApplicationId;\n    } else if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n    } else if (apiKey.applicationId) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n      case \"kovan\":\n        host = \"poa-kovan.gateway.pokt.network\";\n        break;\n      case \"matic\":\n        host = \"poly-mainnet.gateway.pokt.network\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n        break;\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    const connection = {\n      headers: {},\n      url\n    };\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAKZ,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,SAASE,kBAAkB,QAAQ,yBAAyB;AAE5D,MAAMC,oBAAoB,GAAG,0BAA0B;AAGvD,OAAM,MAAOC,cAAe,SAAQF,kBAAkB;EAKlD,OAAOG,SAAS,CAACC,MAAW;IACxB,MAAMC,SAAS,GAAmF;MAC9FC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAE;KACzB;IAED;IACA,IAAIJ,MAAM,IAAI,IAAI,EAAE;MAChBC,SAAS,CAACC,aAAa,GAAGL,oBAAoB;KAEjD,MAAM,IAAI,OAAQG,MAAO,KAAK,QAAQ,EAAE;MACrCC,SAAS,CAACC,aAAa,GAAGF,MAAM;KAEnC,MAAM,IAAIA,MAAM,CAACI,oBAAoB,IAAI,IAAI,EAAE;MAC5CH,SAAS,CAACC,aAAa,GAAGF,MAAM,CAACE,aAAa;MAC9CD,SAAS,CAACG,oBAAoB,GAAGJ,MAAM,CAACI,oBAAoB;KAE/D,MAAM,IAAIJ,MAAM,CAACE,aAAa,EAAE;MAC7BD,SAAS,CAACC,aAAa,GAAGF,MAAM,CAACE,aAAa;KAEjD,MAAM;MACHP,MAAM,CAACU,kBAAkB,CAAC,mCAAmC,EAAE,QAAQ,EAAEL,MAAM,CAAC;;IAGpF,OAAOC,SAAS;EACpB;EAEA,OAAOK,MAAM,CAACC,OAAgB,EAAEP,MAAW;IACvC,IAAIQ,IAAI,GAAW,IAAI;IACvB,QAAQD,OAAO,GAAGA,OAAO,CAACE,IAAI,GAAG,SAAS;MACtC,KAAK,QAAQ;QACTD,IAAI,GAAG,iCAAiC;QACxC;MACJ,KAAK,WAAW;QACZA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,OAAO;QACRA,IAAI,GAAG,gCAAgC;QACvC;MACJ,KAAK,OAAO;QACRA,IAAI,GAAG,mCAAmC;QAC1C;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,yCAAyC;QAChD;MACJ,KAAK,SAAS;QACVA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,SAAS;QACVA,IAAI,GAAG,kCAAkC;QACzC;MACJ;QACIb,MAAM,CAACe,UAAU,CAAC,qBAAqB,EAAEjB,MAAM,CAACkB,MAAM,CAACC,gBAAgB,EAAE;UACrEC,QAAQ,EAAE,SAAS;UACnBC,KAAK,EAAEP;SACV,CAAC;IAAC;IAGX,MAAMQ,GAAG,GAAG,YAAaP,IAAK,UAAWR,MAAM,CAACE,aAAc,EAAE;IAEhE,MAAMc,UAAU,GAAmB;MAAEC,OAAO,EAAE,EAAG;MAAEF;IAAG,CAAE;IACxD,IAAIf,MAAM,CAACI,oBAAoB,IAAI,IAAI,EAAE;MACrCY,UAAU,CAACE,IAAI,GAAG,EAAE;MACpBF,UAAU,CAACG,QAAQ,GAAGnB,MAAM,CAACI,oBAAoB;;IAGrD,OAAOY,UAAU;EACrB;EAEAI,mBAAmB;IACf,OAAQ,IAAI,CAAClB,aAAa,KAAKL,oBAAoB;EACvD","names":["Logger","version","logger","UrlJsonRpcProvider","defaultApplicationId","PocketProvider","getApiKey","apiKey","apiKeyObj","applicationId","loadBalancer","applicationSecretKey","throwArgumentError","getUrl","network","host","name","throwError","errors","INVALID_ARGUMENT","argument","value","url","connection","headers","user","password","isCommunityResource"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@ethersproject/providers/src.ts/pocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n\n        } else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n\n        const connection: ConnectionInfo = { headers: { }, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}