{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\nexport function randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1 || length != length) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return arrayify(result);\n}\n;","map":{"version":3,"mappings":"AAAA,YAAY;;AAEZ,SAASA,QAAQ,QAAQ,sBAAsB;AAE/C,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC;AACA;AAEA;AACA,SAASE,SAAS;EAChB,IAAI,OAAOC,IAAI,KAAK,WAAW,EAAE;IAAE,OAAOA,IAAI;;EAC9C,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAAE,OAAOA,MAAM;;EAClD,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAAE,OAAOA,MAAM;;EAClD,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;AACnD;AAAC;AAED,MAAMC,SAAS,GAAGL,SAAS,EAAE;AAE7B,IAAIM,MAAM,GAAQD,SAAS,CAACC,MAAM,IAAID,SAAS,CAACE,QAAQ;AACxD,IAAI,CAACD,MAAM,IAAI,CAACA,MAAM,CAACE,eAAe,EAAE;EAEpCT,MAAM,CAACU,IAAI,CAAC,8CAA8C,CAAC;EAE3DH,MAAM,GAAG;IACLE,eAAe,EAAE,UAASE,MAAkB;MACxC,OAAOX,MAAM,CAACY,UAAU,CAAC,mCAAmC,EAAEd,MAAM,CAACe,MAAM,CAACC,qBAAqB,EAAE;QAC/FC,SAAS,EAAE;OACd,CAAC;IACN;GACH;;AAGL,OAAM,SAAUC,WAAW,CAACC,MAAc;EACtC,IAAIA,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,IAAI,IAAKA,MAAM,GAAG,CAAE,IAAIA,MAAM,IAAIA,MAAM,EAAE;IAClEjB,MAAM,CAACkB,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAED,MAAM,CAAC;;EAGjE,MAAME,MAAM,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;EACrCV,MAAM,CAACE,eAAe,CAACU,MAAM,CAAC;EAC9B,OAAOtB,QAAQ,CAACsB,MAAM,CAAC;AAC3B;AAAC","names":["arrayify","Logger","version","logger","getGlobal","self","window","global","Error","anyGlobal","crypto","msCrypto","getRandomValues","warn","buffer","throwError","errors","UNSUPPORTED_OPERATION","operation","randomBytes","length","throwArgumentError","result","Uint8Array"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@ethersproject/random/src.ts/browser-random.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst anyGlobal = getGlobal();\n\nlet crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n\n    logger.warn(\"WARNING: Missing strong random number source\");\n\n    crypto = {\n        getRandomValues: function(buffer: Uint8Array): Uint8Array {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}