{"ast":null,"code":"import { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n  switch (name) {\n    case \"homestead\":\n      return \"rpc.ankr.com/eth/\";\n    case \"ropsten\":\n      return \"rpc.ankr.com/eth_ropsten/\";\n    case \"rinkeby\":\n      return \"rpc.ankr.com/eth_rinkeby/\";\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli/\";\n    case \"matic\":\n      return \"rpc.ankr.com/polygon/\";\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum/\";\n  }\n  return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\nexport class AnkrProvider extends UrlJsonRpcProvider {\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n    return apiKey;\n  }\n  static getUrl(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\\/\" + getHost(network.name) + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n    return connection;\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,mBAAmB,QAAQ,aAAa;AACjD,SAASC,kBAAkB,QAAQ,yBAAyB;AAI5D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAGlC,MAAME,aAAa,GAAG,kEAAkE;AAExF,SAASC,OAAO,CAACC,IAAY;EACzB,QAAQA,IAAI;IACR,KAAK,WAAW;MACZ,OAAO,mBAAmB;IAC9B,KAAK,SAAS;MACV,OAAO,2BAA2B;IACtC,KAAK,SAAS;MACV,OAAO,2BAA2B;IACtC,KAAK,QAAQ;MACT,OAAO,0BAA0B;IAErC,KAAK,OAAO;MACR,OAAO,uBAAuB;IAElC,KAAK,UAAU;MACX,OAAO,wBAAwB;EAAC;EAExC,OAAOH,MAAM,CAACI,kBAAkB,CAAC,qBAAqB,EAAE,MAAM,EAAED,IAAI,CAAC;AACzE;AAEA,OAAM,MAAOE,YAAa,SAAQR,kBAAkB;EAGhDS,mBAAmB;IACf,OAAQ,IAAI,CAACC,MAAM,KAAKN,aAAa;EACzC;EAEA,OAAOO,SAAS,CAACD,MAAW;IACxB,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAE,OAAON,aAAa;;IAC1C,OAAOM,MAAM;EACjB;EAEA,OAAOE,MAAM,CAACC,OAAgB,EAAEH,MAAW;IACvC,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGN,aAAa;;IAC5C,MAAMU,UAAU,GAAmB;MAC/BC,SAAS,EAAE,IAAI;MACfC,GAAG,EAAG,WAAW,GAAGX,OAAO,CAACQ,OAAO,CAACP,IAAI,CAAC,GAAGI,MAAO;MACnDO,gBAAgB,EAAE,CAACC,OAAe,EAAEF,GAAW,KAAI;QAC/C,IAAIN,MAAM,CAACA,MAAM,KAAKN,aAAa,EAAE;UACjCL,mBAAmB,EAAE;;QAEzB,OAAOoB,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAChC;KACH;IAED,IAAIV,MAAM,CAACW,aAAa,IAAI,IAAI,EAAE;MAC9BP,UAAU,CAACQ,IAAI,GAAG,EAAE;MACpBR,UAAU,CAACS,QAAQ,GAAGb,MAAM,CAACW,aAAa;;IAG9C,OAAOP,UAAU;EACrB","names":["showThrottleMessage","UrlJsonRpcProvider","Logger","version","logger","defaultApiKey","getHost","name","throwArgumentError","AnkrProvider","isCommunityResource","apiKey","getApiKey","getUrl","network","connection","allowGzip","url","throttleCallback","attempt","Promise","resolve","projectSecret","user","password"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@ethersproject/providers/src.ts/ankr-provider.ts"],"sourcesContent":["\nimport { Network } from \"@ethersproject/networks\";\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport type { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    readonly apiKey: string;\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}