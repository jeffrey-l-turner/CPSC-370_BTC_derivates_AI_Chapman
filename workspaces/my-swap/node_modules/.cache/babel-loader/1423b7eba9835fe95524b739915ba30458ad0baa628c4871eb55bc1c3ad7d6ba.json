{"ast":null,"code":"import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport { getAddress } from '@ethersproject/address';\nvar SupportedChainId;\n(function (SupportedChainId) {\n  SupportedChainId[SupportedChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  SupportedChainId[SupportedChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  SupportedChainId[SupportedChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  SupportedChainId[SupportedChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  SupportedChainId[SupportedChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_ONE\"] = 42161] = \"ARBITRUM_ONE\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_RINKEBY\"] = 421611] = \"ARBITRUM_RINKEBY\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM_GOERLI\"] = 420] = \"OPTIMISM_GOERLI\";\n  SupportedChainId[SupportedChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  SupportedChainId[SupportedChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  SupportedChainId[SupportedChainId[\"CELO\"] = 42220] = \"CELO\";\n  SupportedChainId[SupportedChainId[\"CELO_ALFAJORES\"] = 44787] = \"CELO_ALFAJORES\";\n})(SupportedChainId || (SupportedChainId = {}));\nvar TradeType;\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\nvar Rounding;\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\nvar MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar _toSignificantRoundin, _toFixedRounding;\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = JSBI.BigInt(1);\n    }\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  }\n  Fraction.tryParseFraction = function tryParseFraction(fractionish) {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  } // performs floor division\n  ;\n\n  var _proto = Fraction.prototype;\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n  _proto.add = function add(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.subtract = function subtract(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.multiply = function multiply(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.divide = function divide(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */;\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }, {\n    key: \"asFraction\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }]);\n  return Fraction;\n}();\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction);\n  function CurrencyAmount(currency, numerator, denominator) {\n    var _this;\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;\n    _this.currency = currency;\n    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));\n    return _this;\n  }\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\n\n  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */;\n\n  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {\n    return new CurrencyAmount(currency, numerator, denominator);\n  };\n  var _proto = CurrencyAmount.prototype;\n  _proto.add = function add(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n    var added = _Fraction.prototype.add.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  };\n  _proto.subtract = function subtract(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n    var subtracted = _Fraction.prototype.subtract.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n  };\n  _proto.multiply = function multiply(other) {\n    var multiplied = _Fraction.prototype.multiply.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n  };\n  _proto.divide = function divide(other) {\n    var divided = _Fraction.prototype.divide.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  };\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  };\n  _createClass(CurrencyAmount, [{\n    key: \"wrapped\",\n    get: function get() {\n      if (this.currency.isToken) return this;\n      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n    }\n  }]);\n  return CurrencyAmount;\n}(Fraction);\nvar ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\n\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n  function Percent() {\n    var _this;\n    _this = _Fraction.apply(this, arguments) || this;\n    /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */\n\n    _this.isPercent = true;\n    return _this;\n  }\n  var _proto = Percent.prototype;\n  _proto.add = function add(other) {\n    return toPercent(_Fraction.prototype.add.call(this, other));\n  };\n  _proto.subtract = function subtract(other) {\n    return toPercent(_Fraction.prototype.subtract.call(this, other));\n  };\n  _proto.multiply = function multiply(other) {\n    return toPercent(_Fraction.prototype.multiply.call(this, other));\n  };\n  _proto.divide = function divide(other) {\n    return toPercent(_Fraction.prototype.divide.call(this, other));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  };\n  return Percent;\n}(Fraction);\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction);\n\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\n  function Price() {\n    var _this;\n    var baseCurrency, quoteCurrency, denominator, numerator;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 4) {\n      baseCurrency = args[0];\n      quoteCurrency = args[1];\n      denominator = args[2];\n      numerator = args[3];\n    } else {\n      var result = args[0].quoteAmount.divide(args[0].baseAmount);\n      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];\n      baseCurrency = _ref[0];\n      quoteCurrency = _ref[1];\n      denominator = _ref[2];\n      numerator = _ref[3];\n    }\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\n\n  var _proto = Price.prototype;\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */;\n\n  _proto.multiply = function multiply(other) {\n    !this.quoteCurrency.equals(other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyAmount.currency.equals(this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var result = _Fraction.prototype.multiply.call(this, currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n  }\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  };\n  _createClass(Price, [{\n    key: \"adjustedForDecimals\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n  return Price;\n}(Fraction);\n\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\n\nvar BaseCurrency =\n/**\r\n * Constructs an instance of the base class `BaseCurrency`.\r\n * @param chainId the chain ID on which this currency resides\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction BaseCurrency(chainId, decimals, symbol, name) {\n  !Number.isSafeInteger(chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n  this.chainId = chainId;\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\n\nvar NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(NativeCurrency, _BaseCurrency);\n  function NativeCurrency() {\n    var _this;\n    _this = _BaseCurrency.apply(this, arguments) || this;\n    _this.isNative = true;\n    _this.isToken = false;\n    return _this;\n  }\n  return NativeCurrency;\n}(BaseCurrency);\n\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\n\nfunction validateAndParseAddress(address) {\n  try {\n    return getAddress(address);\n  } catch (error) {\n    throw new Error(address + \" is not a valid address.\");\n  }\n} // Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\n\nvar startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */\n\nfunction checkValidAddress(address) {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address;\n  }\n  throw new Error(address + \" is not a valid address.\");\n}\n\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\nvar Token = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(Token, _BaseCurrency);\n\n  /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   */\n  function Token(chainId, address, decimals, symbol, name, bypassChecksum) {\n    var _this;\n    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;\n    _this.isNative = false;\n    _this.isToken = true;\n    if (bypassChecksum) {\n      _this.address = checkValidAddress(address);\n    } else {\n      _this.address = validateAndParseAddress(address);\n    }\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n  var _proto = Token.prototype;\n  _proto.equals = function equals(other) {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */;\n\n  _createClass(Token, [{\n    key: \"wrapped\",\n    get: function get() {\n      return this;\n    }\n  }]);\n  return Token;\n}(BaseCurrency);\nvar _WETH;\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\n\nvar WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH);\n\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\n\nvar Ether = /*#__PURE__*/function (_NativeCurrency) {\n  _inheritsLoose(Ether, _NativeCurrency);\n  function Ether(chainId) {\n    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;\n  }\n  Ether.onChain = function onChain(chainId) {\n    var _this$_etherCache$cha;\n    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);\n  };\n  var _proto = Ether.prototype;\n  _proto.equals = function equals(other) {\n    return other.isNative && other.chainId === this.chainId;\n  };\n  _createClass(Ether, [{\n    key: \"wrapped\",\n    get: function get() {\n      var weth9 = WETH9[this.chainId];\n      !!!weth9 ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'WRAPPED') : invariant(false) : void 0;\n      return weth9;\n    }\n  }]);\n  return Ether;\n}(NativeCurrency);\nEther._etherCache = {};\n\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var quotedOutputAmount = midPrice.quote(inputAmount); // calculate price impact := (exactQuote - outputAmount) / exactQuote\n\n  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n\n// `maxSize` by removing the last item\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n    var lo = 0,\n      hi = items.length;\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\nvar MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\n\nfunction sqrt(value) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'NEGATIVE') : invariant(false) : void 0; // rely on built in sqrt if possible\n\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\n  }\n  var z;\n  var x;\n  z = value;\n  x = JSBI.add(JSBI.divide(value, TWO), ONE);\n  while (JSBI.lessThan(x, z)) {\n    z = x;\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\n  }\n  return z;\n}\nexport { CurrencyAmount, Ether, Fraction, MaxUint256, NativeCurrency, Percent, Price, Rounding, SupportedChainId, Token, TradeType, WETH9, computePriceImpact, sortedInsert, sqrt, validateAndParseAddress };","map":{"version":3,"mappings":"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","names":["SupportedChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_inheritsLoose","currency","_this","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","chainId","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","sortsBefore","toLowerCase","WETH9","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/constants.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/fractions/fraction.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/fractions/currencyAmount.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/fractions/percent.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/fractions/price.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/baseCurrency.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/nativeCurrency.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/utils/validateAndParseAddress.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/token.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/weth9.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/entities/ether.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/utils/computePriceImpact.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/utils/sortedInsert.ts","/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@uniswap/sdk-core/src/utils/sqrt.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport enum SupportedChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GOERLI = 5,\n  KOVAN = 42,\n\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_RINKEBY = 421611,\n\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n\n  CELO = 42220,\n  CELO_ALFAJORES = 44787\n}\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}