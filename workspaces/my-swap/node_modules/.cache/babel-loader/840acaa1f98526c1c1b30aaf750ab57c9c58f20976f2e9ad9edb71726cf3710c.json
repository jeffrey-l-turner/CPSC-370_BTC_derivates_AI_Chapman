{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n  const result = {};\n  for (let key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n    let value = transaction[key];\n    if (key === \"type\" && value === 0) {\n      continue;\n    }\n    // Quantity-types require no leading zero, unless 0\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(set => {\n        return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n    result[key] = value;\n  }\n  return result;\n}\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n  if (result.status != 1 || typeof result.message !== \"string\" || !result.message.match(/^OK/)) {\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n    throw error;\n  }\n  return result.result;\n}\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    const error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n  if (result.error) {\n    // @TODO: not any\n    const error = new Error(result.error.message || \"unknown error\");\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n    throw error;\n  }\n  return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n  return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error;\n    // Etherscan keeps changing their string\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      let data = e.data;\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n      if (isHexString(data)) {\n        return data;\n      }\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error,\n        data: \"0x\"\n      });\n    }\n  }\n  // Get the message from any nested error structure\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n  message = (message || \"\").toLowerCase();\n  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction with the same hash was already imported.\"\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n  constructor(network, apiKey) {\n    super(network);\n    defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n    defineReadOnly(this, \"apiKey\", apiKey || null);\n  }\n  getBaseUrl() {\n    switch (this.network ? this.network.name : \"invalid\") {\n      case \"homestead\":\n        return \"https:/\\/api.etherscan.io\";\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n      case \"sepolia\":\n        return \"https:/\\/api-sepolia.etherscan.io\";\n      case \"matic\":\n        return \"https:/\\/api.polygonscan.com\";\n      case \"maticmum\":\n        return \"https:/\\/api-testnet.polygonscan.com\";\n      case \"arbitrum\":\n        return \"https:/\\/api.arbiscan.io\";\n      case \"arbitrum-goerli\":\n        return \"https:/\\/api-goerli.arbiscan.io\";\n      case \"optimism\":\n        return \"https:/\\/api-optimistic.etherscan.io\";\n      case \"optimism-goerli\":\n        return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n      default:\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n  }\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n  }\n  getPostUrl() {\n    return `${this.baseUrl}/api`;\n  }\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n  fetch(module, params, post) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = post ? this.getPostUrl() : this.getUrl(module, params);\n      const payload = post ? this.getPostData(module, params) : null;\n      const procFunc = module === \"proxy\" ? getJsonResult : getResult;\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: url,\n        provider: this\n      });\n      const connection = {\n        url: url,\n        throttleSlotInterval: 1000,\n        throttleCallback: (attempt, url) => {\n          if (this.isCommunityResource()) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n      let payloadStr = null;\n      if (payload) {\n        connection.headers = {\n          \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n        };\n        payloadStr = Object.keys(payload).map(key => {\n          return `${key}=${payload[key]}`;\n        }).join(\"&\");\n      }\n      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: url,\n        response: deepCopy(result),\n        provider: this\n      });\n      return result;\n    });\n  }\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.network;\n    });\n  }\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (method) {\n        case \"getBlockNumber\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_blockNumber\"\n          });\n        case \"getGasPrice\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_gasPrice\"\n          });\n        case \"getBalance\":\n          // Returns base-10 result\n          return this.fetch(\"account\", {\n            action: \"balance\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getTransactionCount\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionCount\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getCode\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getCode\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getStorageAt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getStorageAt\",\n            address: params.address,\n            position: params.position,\n            tag: params.blockTag\n          });\n        case \"sendTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_sendRawTransaction\",\n            hex: params.signedTransaction\n          }, true).catch(error => {\n            return checkError(\"sendTransaction\", error, params.signedTransaction);\n          });\n        case \"getBlock\":\n          if (params.blockTag) {\n            return this.fetch(\"proxy\", {\n              action: \"eth_getBlockByNumber\",\n              tag: params.blockTag,\n              boolean: params.includeTransactions ? \"true\" : \"false\"\n            });\n          }\n          throw new Error(\"getBlock by blockHash not implemented\");\n        case \"getTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionByHash\",\n            txhash: params.transactionHash\n          });\n        case \"getTransactionReceipt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionReceipt\",\n            txhash: params.transactionHash\n          });\n        case \"call\":\n          {\n            if (params.blockTag !== \"latest\") {\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            }\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_call\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"call\", error, params.transaction);\n            }\n          }\n        case \"estimateGas\":\n          {\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_estimateGas\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"estimateGas\", error, params.transaction);\n            }\n          }\n        case \"getLogs\":\n          {\n            const args = {\n              action: \"getLogs\"\n            };\n            if (params.filter.fromBlock) {\n              args.fromBlock = checkLogTag(params.filter.fromBlock);\n            }\n            if (params.filter.toBlock) {\n              args.toBlock = checkLogTag(params.filter.toBlock);\n            }\n            if (params.filter.address) {\n              args.address = params.filter.address;\n            }\n            // @TODO: We can handle slightly more complicated logs using the logs API\n            if (params.filter.topics && params.filter.topics.length > 0) {\n              if (params.filter.topics.length > 1) {\n                logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  topics: params.filter.topics\n                });\n              }\n              if (params.filter.topics.length === 1) {\n                const topic0 = params.filter.topics[0];\n                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                  logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topic0: topic0\n                  });\n                }\n                args.topic0 = topic0;\n              }\n            }\n            const logs = yield this.fetch(\"logs\", args);\n            // Cache txHash => blockHash\n            let blocks = {};\n            // Add any missing blockHash to the logs\n            for (let i = 0; i < logs.length; i++) {\n              const log = logs[i];\n              if (log.blockHash != null) {\n                continue;\n              }\n              if (blocks[log.blockNumber] == null) {\n                const block = yield this.getBlock(log.blockNumber);\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n              }\n              log.blockHash = blocks[log.blockNumber];\n            }\n            return logs;\n          }\n        case \"getEtherPrice\":\n          if (this.network.name !== \"homestead\") {\n            return 0.0;\n          }\n          return parseFloat((yield this.fetch(\"stats\", {\n            action: \"ethprice\"\n          })).ethusd);\n        default:\n          break;\n      }\n      return _super.perform.call(this, method, params);\n    });\n  }\n  // Note: The `page` page parameter only allows pagination within the\n  //       10,000 window available without a page and offset parameter\n  //       Error: Result window is too large, PageNo x Offset size must\n  //              be less than or equal to 10000\n  getHistory(addressOrName, startBlock, endBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const params = {\n        action: \"txlist\",\n        address: yield this.resolveName(addressOrName),\n        startblock: startBlock == null ? 0 : startBlock,\n        endblock: endBlock == null ? 99999999 : endBlock,\n        sort: \"asc\"\n      };\n      const result = yield this.fetch(\"account\", params);\n      return result.map(tx => {\n        [\"contractAddress\", \"to\"].forEach(function (key) {\n          if (tx[key] == \"\") {\n            delete tx[key];\n          }\n        });\n        if (tx.creates == null && tx.contractAddress != null) {\n          tx.creates = tx.contractAddress;\n        }\n        const item = this.formatter.transactionResponse(tx);\n        if (tx.timeStamp) {\n          item.timestamp = parseInt(tx.timeStamp);\n        }\n        return item;\n      });\n    });\n  }\n  isCommunityResource() {\n    return this.apiKey == null;\n  }\n}","map":{"version":3,"mappings":"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","names":["hexlify","hexValue","isHexString","deepCopy","defineReadOnly","accessListify","fetchJson","showThrottleMessage","Logger","version","logger","BaseProvider","getTransactionPostData","transaction","result","key","value","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","map","set","address","storageKeys","join","getResult","status","message","match","error","Error","JSON","stringify","toLowerCase","indexOf","throttleRetry","getJsonResult","jsonrpc","code","data","checkLogTag","blockTag","parseInt","substring","checkError","method","errors","SERVER_ERROR","e","replace","throwError","CALL_EXCEPTION","body","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","EtherscanProvider","constructor","network","apiKey","getBaseUrl","name","throwArgumentError","getUrl","module","params","query","Object","keys","reduce","accum","baseUrl","getPostUrl","getPostData","apikey","fetch","post","url","payload","procFunc","emit","action","request","provider","connection","throttleSlotInterval","throttleCallback","attempt","isCommunityResource","Promise","resolve","payloadStr","headers","response","detectNetwork","perform","tag","position","hex","signedTransaction","catch","boolean","includeTransactions","txhash","transactionHash","postData","args","filter","fromBlock","toBlock","topics","length","UNSUPPORTED_OPERATION","topic0","logs","blocks","i","log","blockHash","blockNumber","block","getBlock","hash","parseFloat","ethusd","_super","getHistory","addressOrName","startBlock","endBlock","resolveName","startblock","endblock","sort","tx","forEach","creates","contractAddress","item","formatter","transactionResponse","timeStamp","timestamp"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || typeof(result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string | null;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || null);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}