{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true,\n  ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = yield nameOrPromise;\n    if (typeof name !== \"string\") {\n      logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n    // If it is already an address, just use it (after adding checksum)\n    try {\n      return getAddress(name);\n    } catch (error) {}\n    if (!resolver) {\n      logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resolveName\"\n      });\n    }\n    const address = yield resolver.resolveName(name);\n    if (address == null) {\n      logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n    return address;\n  });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (Array.isArray(paramType)) {\n      return yield Promise.all(paramType.map((paramType, index) => {\n        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n      }));\n    }\n    if (paramType.type === \"address\") {\n      return yield resolveName(resolver, value);\n    }\n    if (paramType.type === \"tuple\") {\n      return yield resolveAddresses(resolver, value, paramType.components);\n    }\n    if (paramType.baseType === \"array\") {\n      if (!Array.isArray(value)) {\n        return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"value\",\n          value\n        }));\n      }\n      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n    return value;\n  });\n}\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If an extra argument is given, it is overrides\n    let overrides = {};\n    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      overrides = shallowCopy(args.pop());\n    }\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n      if (overrides.from) {\n        // Contracts with a Signer are from the Signer's frame-of-reference;\n        // but we allow overriding \"from\" if it matches the signer\n        overrides.from = resolveProperties({\n          override: resolveName(contract.signer, overrides.from),\n          signer: contract.signer.getAddress()\n        }).then(check => __awaiter(this, void 0, void 0, function* () {\n          if (getAddress(check.signer) !== check.override) {\n            logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides.from\"\n            });\n          }\n          return check.override;\n        }));\n      } else {\n        overrides.from = contract.signer.getAddress();\n      }\n    } else if (overrides.from) {\n      overrides.from = resolveName(contract.provider, overrides.from);\n      //} else {\n      // Contracts without a signer can override \"from\", and if\n      // unspecified the zero address is used\n      //overrides.from = AddressZero;\n    }\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = yield resolveProperties({\n      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n      address: contract.resolvedAddress,\n      overrides: resolveProperties(overrides) || {}\n    });\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx = {\n      data: data,\n      to: resolved.address\n    };\n    // Resolved Overrides\n    const ro = resolved.overrides;\n    // Populate simple overrides\n    if (ro.nonce != null) {\n      tx.nonce = BigNumber.from(ro.nonce).toNumber();\n    }\n    if (ro.gasLimit != null) {\n      tx.gasLimit = BigNumber.from(ro.gasLimit);\n    }\n    if (ro.gasPrice != null) {\n      tx.gasPrice = BigNumber.from(ro.gasPrice);\n    }\n    if (ro.maxFeePerGas != null) {\n      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n    }\n    if (ro.maxPriorityFeePerGas != null) {\n      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n    }\n    if (ro.from != null) {\n      tx.from = ro.from;\n    }\n    if (ro.type != null) {\n      tx.type = ro.type;\n    }\n    if (ro.accessList != null) {\n      tx.accessList = accessListify(ro.accessList);\n    }\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n      // Compute the intrinsic gas cost for this transaction\n      // @TODO: This is based on the yellow paper as of Petersburg; this is something\n      // we may wish to parameterize in v6 as part of the Network object. Since this\n      // is always a non-nil to address, we can ignore G_create, but may wish to add\n      // similar logic to the ContractFactory.\n      let intrinsic = 21000;\n      const bytes = arrayify(data);\n      for (let i = 0; i < bytes.length; i++) {\n        intrinsic += 4;\n        if (bytes[i]) {\n          intrinsic += 64;\n        }\n      }\n      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n    // Populate \"value\" override\n    if (ro.value) {\n      const roValue = BigNumber.from(ro.value);\n      if (!roValue.isZero() && !fragment.payable) {\n        logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: overrides.value\n        });\n      }\n      tx.value = roValue;\n    }\n    if (ro.customData) {\n      tx.customData = shallowCopy(ro.customData);\n    }\n    if (ro.ccipReadEnabled) {\n      tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n    delete overrides.type;\n    delete overrides.accessList;\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);\n    if (leftovers.length) {\n      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"overrides\",\n        overrides: leftovers\n      });\n    }\n    return tx;\n  });\n}\nfunction buildPopulate(contract, fragment) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return populateTransaction(contract, fragment, args);\n  };\n}\nfunction buildEstimate(contract, fragment) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!signerOrProvider) {\n        logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"estimateGas\"\n        });\n      }\n      const tx = yield populateTransaction(contract, fragment, args);\n      return yield signerOrProvider.estimateGas(tx);\n    });\n  };\n}\nfunction addContractWait(contract, tx) {\n  const wait = tx.wait.bind(tx);\n  tx.wait = confirmations => {\n    return wait(confirmations).then(receipt => {\n      receipt.events = receipt.logs.map(log => {\n        let event = deepCopy(log);\n        let parsed = null;\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {}\n        // Successfully parsed the event log; include it\n        if (parsed) {\n          event.args = parsed.args;\n          event.decode = (data, topics) => {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        }\n        // Useful operations\n        event.removeListener = () => {\n          return contract.provider;\n        };\n        event.getBlock = () => {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n        event.getTransaction = () => {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n        event.getTransactionReceipt = () => {\n          return Promise.resolve(receipt);\n        };\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      // Extract the \"blockTag\" override if present\n      let blockTag = undefined;\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        const overrides = shallowCopy(args.pop());\n        if (overrides.blockTag != null) {\n          blockTag = yield overrides.blockTag;\n        }\n        delete overrides.blockTag;\n        args.push(overrides);\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed(blockTag);\n      }\n      // Call a node and get the result\n      const tx = yield populateTransaction(contract, fragment, args);\n      const result = yield signerOrProvider.call(tx, blockTag);\n      try {\n        let value = contract.interface.decodeFunctionResult(fragment, result);\n        if (collapseSimple && fragment.outputs.length === 1) {\n          value = value[0];\n        }\n        return value;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          error.address = contract.address;\n          error.args = args;\n          error.transaction = tx;\n        }\n        throw error;\n      }\n    });\n  };\n}\nfunction buildSend(contract, fragment) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!contract.signer) {\n        logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction\"\n        });\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed();\n      }\n      const txRequest = yield populateTransaction(contract, fragment, args);\n      const tx = yield contract.signer.sendTransaction(txRequest);\n      // Tweak the tx.wait so the receipt has extra properties\n      addContractWait(contract, tx);\n      return tx;\n    });\n  };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(topic => {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n    return topic;\n  }).join(\":\") : \"\");\n}\nclass RunningEvent {\n  constructor(tag, filter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n  addListener(listener, once) {\n    this._listeners.push({\n      listener: listener,\n      once: once\n    });\n  }\n  removeListener(listener) {\n    let done = false;\n    this._listeners = this._listeners.filter(item => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n      done = true;\n      return false;\n    });\n  }\n  removeAllListeners() {\n    this._listeners = [];\n  }\n  listeners() {\n    return this._listeners.map(i => i.listener);\n  }\n  listenerCount() {\n    return this._listeners.length;\n  }\n  run(args) {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter(item => {\n      const argsCopy = args.slice();\n      // Call the callback in the next event loop\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0);\n      // Reschedule it if it not \"once\"\n      return !item.once;\n    });\n    return listenerCount;\n  }\n  prepareEvent(event) {}\n  // Returns the array that will be applied to an emit\n  getEmit(event) {\n    return [event];\n  }\n}\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n  constructor(address, contractInterface, fragment, topics) {\n    const filter = {\n      address: address\n    };\n    let topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n    event.decode = (data, topics) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n    try {\n      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n  getEmit(event) {\n    const errors = checkResultErrors(event.args);\n    if (errors.length) {\n      throw errors[0].error;\n    }\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n  constructor(address, contractInterface) {\n    super(\"*\", {\n      address: address\n    });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n      event.decode = (data, topics) => {\n        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n      };\n      event.args = parsed.args;\n    } catch (error) {\n      // No matching event\n    }\n  }\n}\nexport class BaseContract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    var _this = this;\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      const uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(eventSignature => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n          return {\n            address: _this.address,\n            topics: _this.interface.encodeFilterTopics(event, args)\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(name => {\n        const filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n    // Swallow bad ENS names to prevent Unhandled Exceptions\n    this.resolvedAddress.catch(e => {});\n    const uniqueNames = {};\n    const uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(signature => {\n      const fragment = this.interface.functions[signature];\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n        return;\n      }\n      uniqueSignatures[signature] = true;\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        const name = fragment.name;\n        if (!uniqueNames[`%${name}`]) {\n          uniqueNames[`%${name}`] = [];\n        }\n        uniqueNames[`%${name}`].push(signature);\n      }\n      if (this[signature] == null) {\n        defineReadOnly(this, signature, buildDefault(this, fragment, true));\n      }\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (this.functions[signature] == null) {\n        defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n      }\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n      }\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n      }\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(name => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n      // Strip off the leading \"%\" used for prototype protection\n      name = name.substring(1);\n      const signature = signatures[0];\n      // If overwriting a member property that is null, swallow the error\n      try {\n        if (this[name] == null) {\n          defineReadOnly(this, name, this[signature]);\n        }\n      } catch (e) {}\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n      }\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction);\n  }\n  static getInterface(contractInterface) {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n    return new Interface(contractInterface);\n  }\n  // @TODO: Allow timeout?\n  deployed() {\n    return this._deployed();\n  }\n  _deployed(blockTag) {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {\n          if (code === \"0x\") {\n            logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n              contractAddress: this.address,\n              operation: \"getDeployed\"\n            });\n          }\n          return this;\n        });\n      }\n    }\n    return this._deployedPromise;\n  }\n  // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n  fallback(overrides) {\n    if (!this.signer) {\n      logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"sendTransaction(fallback)\"\n      });\n    }\n    const tx = shallowCopy(overrides || {});\n    [\"from\", \"to\"].forEach(function (key) {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  }\n  // Reconnect to a different signer or provider\n  connect(signerOrProvider) {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n    const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n    return contract;\n  }\n  // Re-attach to a different on-chain instance of this contract\n  attach(addressOrName) {\n    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n  }\n  static isIndexed(value) {\n    return Indexed.isIndexed(value);\n  }\n  _normalizeRunningEvent(runningEvent) {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n    return runningEvent;\n  }\n  _getRunningEvent(eventName) {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      }\n      // Listen for any event that is registered\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      }\n      // Listen for any event\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      }\n      // Get the event Fragment (throws if ambiguous/unknown event)\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n    }\n    // We have topics to filter by...\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n      } catch (error) {}\n      // Filter by the unknown topichash\n      const filter = {\n        address: this.address,\n        topics: eventName.topics\n      };\n      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n    }\n    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n  }\n  _checkRunningEvents(runningEvent) {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag];\n      // If we have a poller for this, remove it\n      const emit = this._wrappedEmits[runningEvent.tag];\n      if (emit && runningEvent.filter) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  }\n  // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n  _wrapEvent(runningEvent, log, listener) {\n    const event = deepCopy(log);\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n    };\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    };\n    // This may throw if the topics and data mismatch the signature\n    runningEvent.prepareEvent(event);\n    return event;\n  }\n  _addEventListener(runningEvent, listener, once) {\n    if (!this.provider) {\n      logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"once\"\n      });\n    }\n    runningEvent.addListener(listener, once);\n    // Track this running event and its listeners (may already be there; but no hard in updating)\n    this._runningEvents[runningEvent.tag] = runningEvent;\n    // If we are not polling the provider, start polling\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = log => {\n        let event = this._wrapEvent(runningEvent, log, listener);\n        // Try to emit the result for the parameterized event...\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        }\n        // Always emit \"event\" for fragment-base events\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        }\n        // Emit \"error\" if there was an error\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n      // Special events, like \"error\" do not have a filter\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n  queryFilter(event, fromBlockOrBlockhash, toBlock) {\n    const runningEvent = this._getRunningEvent(event);\n    const filter = shallowCopy(runningEvent.filter);\n    if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n      }\n      filter.blockHash = fromBlockOrBlockhash;\n    } else {\n      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      filter.toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n    return this.provider.getLogs(filter).then(logs => {\n      return logs.map(log => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n  on(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n    return this;\n  }\n  once(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n    return this;\n  }\n  emit(eventName) {\n    if (!this.provider) {\n      return false;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      args[_key6 - 1] = arguments[_key6];\n    }\n    const result = runningEvent.run(args) > 0;\n    // May have drained all the \"once\" events; check for living events\n    this._checkRunningEvents(runningEvent);\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!this.provider) {\n      return 0;\n    }\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n  listeners(eventName) {\n    if (!this.provider) {\n      return [];\n    }\n    if (eventName == null) {\n      const result = [];\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach(listener => {\n          result.push(listener);\n        });\n      }\n      return result;\n    }\n    return this._getRunningEvent(eventName).listeners();\n  }\n  removeAllListeners(eventName) {\n    if (!this.provider) {\n      return this;\n    }\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n      }\n      return this;\n    }\n    // Delete any listeners\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeAllListeners();\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  off(eventName, listener) {\n    if (!this.provider) {\n      return this;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeListener(listener);\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n}\nexport class Contract extends BaseContract {}\nexport class ContractFactory {\n  constructor(contractInterface, bytecode, signer) {\n    let bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n  // @TODO: Future; rename to populateTransaction?\n  getDeployTransaction() {\n    let tx = {};\n    // If we have 1 additional argument, we allow transaction overrides\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      tx = shallowCopy(args.pop());\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    }\n    // Do not allow these to be overridden in a deployment transaction\n    [\"data\", \"from\", \"to\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    if (tx.value) {\n      const value = BigNumber.from(tx.value);\n      if (!value.isZero() && !this.interface.deploy.payable) {\n        logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: tx.value\n        });\n      }\n    }\n    // Make sure the call matches the constructor signature\n    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n    // Set the data to the bytecode + the encoded constructor arguments\n    tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n    return tx;\n  }\n  deploy() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      let overrides = {};\n      // If 1 extra parameter was passed in, it contains overrides\n      if (args.length === this.interface.deploy.inputs.length + 1) {\n        overrides = args.pop();\n      }\n      // Make sure the call matches the constructor signature\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n      // Resolve ENS names and promises in the arguments\n      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n      params.push(overrides);\n      // Get the deployment transaction (with optional overrides)\n      const unsignedTx = this.getDeployTransaction(...params);\n      // Send the deployment transaction\n      const tx = yield this.signer.sendTransaction(unsignedTx);\n      const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n      const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n      // Add the modified wait that wraps events\n      addContractWait(contract, tx);\n      defineReadOnly(contract, \"deployTransaction\", tx);\n      return contract;\n    });\n  }\n  attach(address) {\n    return this.constructor.getContract(address, this.interface, this.signer);\n  }\n  connect(signer) {\n    return new this.constructor(this.interface, this.bytecode, signer);\n  }\n  static fromSolidity(compilerOutput, signer) {\n    if (compilerOutput == null) {\n      logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n        argument: \"compilerOutput\"\n      });\n    }\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n    const abi = compilerOutput.abi;\n    let bytecode = null;\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n    return new this(abi, bytecode, signer);\n  }\n  static getInterface(contractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n  static getContractAddress(tx) {\n    return getContractAddress(tx);\n  }\n  static getContract(address, contractInterface, signer) {\n    return new Contract(address, contractInterface, signer);\n  }\n}","map":{"version":3,"mappings":"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","names":["checkResultErrors","Indexed","Interface","Provider","Signer","VoidSigner","getAddress","getContractAddress","BigNumber","arrayify","concat","hexlify","isBytes","isHexString","defineReadOnly","deepCopy","getStatic","resolveProperties","shallowCopy","accessListify","Logger","version","logger","allowedTransactionKeys","chainId","data","from","gasLimit","gasPrice","nonce","to","value","type","accessList","maxFeePerGas","maxPriorityFeePerGas","customData","ccipReadEnabled","resolveName","resolver","nameOrPromise","name","throwArgumentError","error","throwError","errors","UNSUPPORTED_OPERATION","operation","address","resolveAddresses","paramType","Array","isArray","Promise","all","map","index","components","baseType","reject","makeError","INVALID_ARGUMENT","argument","v","arrayChildren","populateTransaction","contract","fragment","args","overrides","length","inputs","pop","checkArgumentCount","signer","override","then","check","__awaiter","provider","resolved","resolvedAddress","interface","encodeFunctionData","tx","ro","toNumber","gas","intrinsic","bytes","i","add","roValue","isZero","payable","leftovers","Object","keys","filter","key","l","JSON","stringify","join","buildPopulate","buildEstimate","signerOrProvider","estimateGas","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","e","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","blockTag","undefined","push","deployTransaction","_deployed","result","call","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","buildSend","txRequest","sendTransaction","buildDefault","constant","getEventTag","topic","RunningEvent","constructor","tag","_listeners","addListener","listener","once","done","item","removeAllListeners","listeners","listenerCount","run","argsCopy","slice","setTimeout","apply","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","getEventTopic","format","decodeError","WildcardRunningEvent","BaseContract","addressOrName","new","target","isSigner","isProvider","uniqueFilters","forEach","filters","encodeFilterTopics","warn","catch","uniqueNames","uniqueSignatures","functions","callStatic","signatures","substring","getInterface","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","getEvent","Error","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","reduce","accum","Contract","ContractFactory","bytecode","bytecodeHex","object","getDeployTransaction","deploy","encodeDeploy","params","unsignedTx","getContract","fromSolidity","compilerOutput","MISSING_ARGUMENT","parse","abi","evm"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@ethersproject/contracts/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter | string, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}