{"ast":null,"code":"// This file contains code to easily connect to and get information from a wallet on chain\n\nimport { BigNumber, ethers } from 'ethers';\nimport JSBI from 'jsbi';\nimport { ERC20_ABI, MAX_FEE_PER_GAS, MAX_PRIORITY_FEE_PER_GAS, WETH_ABI, WETH_CONTRACT_ADDRESS } from './constants';\nimport { toReadableAmount } from './conversion';\nimport { getProvider, getWalletAddress, sendTransaction } from './providers';\nexport async function getCurrencyBalance(provider, address, currency) {\n  // Handle ETH directly\n  if (currency.isNative) {\n    return ethers.utils.formatEther(await provider.getBalance(address));\n  }\n\n  // Get currency otherwise\n  const currencyContract = new ethers.Contract(currency.address, ERC20_ABI, provider);\n  const balance = await currencyContract.balanceOf(address);\n  const decimals = await currencyContract.decimals();\n\n  // Format with proper units (approximate)\n  return toReadableAmount(balance, decimals).toString();\n}\n\n// wraps ETH (rounding up to the nearest ETH for decimal places)\nexport async function wrapETH(eth) {\n  const provider = getProvider();\n  const address = getWalletAddress();\n  if (!provider || !address) {\n    throw new Error('Cannot wrap ETH without a provider and wallet address');\n  }\n  const wethContract = new ethers.Contract(WETH_CONTRACT_ADDRESS, WETH_ABI, provider);\n  const transaction = {\n    data: wethContract.interface.encodeFunctionData('deposit'),\n    value: BigNumber.from(Math.ceil(eth)).mul(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)).toString()).toString(),\n    from: address,\n    to: WETH_CONTRACT_ADDRESS,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS\n  };\n  await sendTransaction(transaction);\n}\n\n// unwraps ETH (rounding up to the nearest ETH for decimal places)\nexport async function unwrapETH(eth) {\n  const provider = getProvider();\n  const address = getWalletAddress();\n  if (!provider || !address) {\n    throw new Error('Cannot unwrap ETH without a provider and wallet address');\n  }\n  const wethContract = new ethers.Contract(WETH_CONTRACT_ADDRESS, WETH_ABI, provider);\n  const transaction = {\n    data: wethContract.interface.encodeFunctionData('withdraw', [BigNumber.from(Math.ceil(eth)).mul(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)).toString()).toString()]),\n    from: address,\n    to: WETH_CONTRACT_ADDRESS,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS\n  };\n  await sendTransaction(transaction);\n}","map":{"version":3,"names":["BigNumber","ethers","JSBI","ERC20_ABI","MAX_FEE_PER_GAS","MAX_PRIORITY_FEE_PER_GAS","WETH_ABI","WETH_CONTRACT_ADDRESS","toReadableAmount","getProvider","getWalletAddress","sendTransaction","getCurrencyBalance","provider","address","currency","isNative","utils","formatEther","getBalance","currencyContract","Contract","balance","balanceOf","decimals","toString","wrapETH","eth","Error","wethContract","transaction","data","interface","encodeFunctionData","value","from","Math","ceil","mul","exponentiate","BigInt","to","maxFeePerGas","maxPriorityFeePerGas","unwrapETH"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/src/libs/wallet.ts"],"sourcesContent":["// This file contains code to easily connect to and get information from a wallet on chain\n\nimport { Currency } from '@uniswap/sdk-core'\nimport { BigNumber, ethers } from 'ethers'\nimport { providers } from 'ethers'\nimport JSBI from 'jsbi'\nimport {\n  ERC20_ABI,\n  MAX_FEE_PER_GAS,\n  MAX_PRIORITY_FEE_PER_GAS,\n  WETH_ABI,\n  WETH_CONTRACT_ADDRESS,\n} from './constants'\nimport { toReadableAmount } from './conversion'\nimport { getProvider, getWalletAddress, sendTransaction } from './providers'\n\nexport async function getCurrencyBalance(\n  provider: providers.Provider,\n  address: string,\n  currency: Currency\n): Promise<string> {\n  // Handle ETH directly\n  if (currency.isNative) {\n    return ethers.utils.formatEther(await provider.getBalance(address))\n  }\n\n  // Get currency otherwise\n  const currencyContract = new ethers.Contract(\n    currency.address,\n    ERC20_ABI,\n    provider\n  )\n  const balance: number = await currencyContract.balanceOf(address)\n  const decimals: number = await currencyContract.decimals()\n\n  // Format with proper units (approximate)\n  return toReadableAmount(balance, decimals).toString()\n}\n\n// wraps ETH (rounding up to the nearest ETH for decimal places)\nexport async function wrapETH(eth: number) {\n  const provider = getProvider()\n  const address = getWalletAddress()\n  if (!provider || !address) {\n    throw new Error('Cannot wrap ETH without a provider and wallet address')\n  }\n\n  const wethContract = new ethers.Contract(\n    WETH_CONTRACT_ADDRESS,\n    WETH_ABI,\n    provider\n  )\n\n  const transaction = {\n    data: wethContract.interface.encodeFunctionData('deposit'),\n    value: BigNumber.from(Math.ceil(eth))\n      .mul(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)).toString())\n      .toString(),\n    from: address,\n    to: WETH_CONTRACT_ADDRESS,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  await sendTransaction(transaction)\n}\n\n// unwraps ETH (rounding up to the nearest ETH for decimal places)\nexport async function unwrapETH(eth: number) {\n  const provider = getProvider()\n  const address = getWalletAddress()\n  if (!provider || !address) {\n    throw new Error('Cannot unwrap ETH without a provider and wallet address')\n  }\n\n  const wethContract = new ethers.Contract(\n    WETH_CONTRACT_ADDRESS,\n    WETH_ABI,\n    provider\n  )\n\n  const transaction = {\n    data: wethContract.interface.encodeFunctionData('withdraw', [\n      BigNumber.from(Math.ceil(eth))\n        .mul(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)).toString())\n        .toString(),\n    ]),\n    from: address,\n    to: WETH_CONTRACT_ADDRESS,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  await sendTransaction(transaction)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}