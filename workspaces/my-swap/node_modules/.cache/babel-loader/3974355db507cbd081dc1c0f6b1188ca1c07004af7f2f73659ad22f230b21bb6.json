{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { id } from \"./id\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n  const bytes = arrayify(value);\n  const padOffset = bytes.length % 32;\n  if (padOffset) {\n    return hexConcat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    if (typeof value !== \"string\") {\n      logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    }\n    return value;\n  };\n}\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (value) {\n    try {\n      return BigNumber.from(value).toString();\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    try {\n      const bytes = arrayify(value);\n      if (bytes.length !== 32) {\n        throw new Error(\"bad length\");\n      }\n      return hexlify(bytes);\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d*)$/);\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2] || \"256\");\n      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n        logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n      }\n      const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n      const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n      return function (value) {\n        const v = BigNumber.from(value);\n        if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n          logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n        }\n        return hexZeroPad(v.toTwos(256).toHexString(), 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n    if (match) {\n      const width = parseInt(match[1]);\n      if (width === 0 || width > 32 || match[1] !== String(width)) {\n        logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n      }\n      return function (value) {\n        const bytes = arrayify(value);\n        if (bytes.length !== width) {\n          logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n        }\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return hexZeroPad(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(_ref => {\n    let {\n      name,\n      type\n    } = _ref;\n    return type + \" \" + name;\n  }).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n  constructor(types) {\n    defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n    defineReadOnly(this, \"_encoderCache\", {});\n    defineReadOnly(this, \"_types\", {});\n    // Link struct types to their direct child structs\n    const links = {};\n    // Link structs to structs which contain them as a child\n    const parents = {};\n    // Link all subtypes within a given struct\n    const subtypes = {};\n    Object.keys(types).forEach(type => {\n      links[type] = {};\n      parents[type] = [];\n      subtypes[type] = {};\n    });\n    for (const name in types) {\n      const uniqueNames = {};\n      types[name].forEach(field => {\n        // Check each field has a unique name\n        if (uniqueNames[field.name]) {\n          logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n        }\n        uniqueNames[field.name] = true;\n        // Get the base type (drop any array specifiers)\n        const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n        if (baseType === name) {\n          logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n        }\n        // Is this a base encoding type?\n        const encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          return;\n        }\n        if (!parents[baseType]) {\n          logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n        }\n        // Add linkage\n        parents[baseType].push(name);\n        links[name][baseType] = true;\n      });\n    }\n    // Deduce the primary type\n    const primaryTypes = Object.keys(parents).filter(n => parents[n].length === 0);\n    if (primaryTypes.length === 0) {\n      logger.throwArgumentError(\"missing primary type\", \"types\", types);\n    } else if (primaryTypes.length > 1) {\n      logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", types);\n    }\n    defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n    // Check for circular type references\n    function checkCircular(type, found) {\n      if (found[type]) {\n        logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n      }\n      found[type] = true;\n      Object.keys(links[type]).forEach(child => {\n        if (!parents[child]) {\n          return;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        Object.keys(found).forEach(subtype => {\n          subtypes[subtype][child] = true;\n        });\n      });\n      delete found[type];\n    }\n    checkCircular(this.primaryType, {});\n    // Compute each fully describe type\n    for (const name in subtypes) {\n      const st = Object.keys(subtypes[name]);\n      st.sort();\n      this._types[name] = encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\");\n    }\n  }\n  getEncoder(type) {\n    let encoder = this._encoderCache[type];\n    if (!encoder) {\n      encoder = this._encoderCache[type] = this._getEncoder(type);\n    }\n    return encoder;\n  }\n  _getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return encoder;\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const subEncoder = this.getEncoder(subtype);\n      const length = parseInt(match[3]);\n      return value => {\n        if (length >= 0 && value.length !== length) {\n          logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n        }\n        let result = value.map(subEncoder);\n        if (this._types[subtype]) {\n          result = result.map(keccak256);\n        }\n        return keccak256(hexConcat(result));\n      };\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      const encodedType = id(this._types[type]);\n      return value => {\n        const values = fields.map(_ref2 => {\n          let {\n            name,\n            type\n          } = _ref2;\n          const result = this.getEncoder(type)(value[name]);\n          if (this._types[type]) {\n            return keccak256(result);\n          }\n          return result;\n        });\n        values.unshift(encodedType);\n        return hexConcat(values);\n      };\n    }\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n  encodeType(name) {\n    const result = this._types[name];\n    if (!result) {\n      logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    }\n    return result;\n  }\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return callback(type, value);\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const length = parseInt(match[3]);\n      if (length >= 0 && value.length !== length) {\n        logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n      }\n      return value.map(v => this._visit(subtype, v, callback));\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      return fields.reduce((accum, _ref3) => {\n        let {\n          name,\n          type\n        } = _ref3;\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n  static hashDomain(domain) {\n    const domainFields = [];\n    for (const name in domain) {\n      const type = domainFieldTypes[name];\n      if (!type) {\n        logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      }\n      domainFields.push({\n        name,\n        type\n      });\n    }\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n  static encode(domain, types, value) {\n    return hexConcat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  }\n  // Replaces all address types with ENS names with their looked up address\n  static resolveNames(domain, types, value, resolveName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Make a copy to isolate it from the object passed in\n      domain = shallowCopy(domain);\n      // Look up all ENS names\n      const ensCache = {};\n      // Do we need to look up the domain's verifyingContract?\n      if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n        ensCache[domain.verifyingContract] = \"0x\";\n      }\n      // We are going to use the encoder to visit all the base values\n      const encoder = TypedDataEncoder.from(types);\n      // Get a list of all the addresses\n      encoder.visit(value, (type, value) => {\n        if (type === \"address\" && !isHexString(value, 20)) {\n          ensCache[value] = \"0x\";\n        }\n        return value;\n      });\n      // Lookup each name\n      for (const name in ensCache) {\n        ensCache[name] = yield resolveName(name);\n      }\n      // Replace the domain verifyingContract if needed\n      if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n        domain.verifyingContract = ensCache[domain.verifyingContract];\n      }\n      // Replace all ENS names with their address\n      value = encoder.visit(value, (type, value) => {\n        if (type === \"address\" && ensCache[value]) {\n          return ensCache[value];\n        }\n        return value;\n      });\n      return {\n        domain,\n        value\n      };\n    });\n  }\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain);\n    // Derive the EIP712Domain Struct reference type\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n      if (value == null) {\n        return;\n      }\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    const typesWithDomain = shallowCopy(types);\n    if (typesWithDomain.EIP712Domain) {\n      logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    } else {\n      typesWithDomain.EIP712Domain = domainTypes;\n    }\n    // Validate the data structures and types\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(arrayify(value));\n        }\n        // uint or int\n        if (type.match(/^u?int/)) {\n          return BigNumber.from(value).toString();\n        }\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n          case \"bool\":\n            return !!value;\n          case \"string\":\n            if (typeof value !== \"string\") {\n              logger.throwArgumentError(`invalid string`, \"value\", value);\n            }\n            return value;\n        }\n        return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n      })\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","hexConcat","hexlify","hexZeroPad","isHexString","keccak256","deepCopy","defineReadOnly","shallowCopy","Logger","version","logger","id","padding","Uint8Array","fill","NegativeOne","from","Zero","One","MaxUint256","hexPadRight","value","bytes","padOffset","length","slice","hexTrue","toHexString","hexFalse","domainFieldTypes","name","chainId","verifyingContract","salt","domainFieldNames","checkString","key","throwArgumentError","JSON","stringify","domainChecks","toString","error","toLowerCase","Error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","mask","boundsLower","add","mul","v","lt","gt","toTwos","encodeType","fields","map","join","TypedDataEncoder","constructor","types","Object","freeze","links","parents","subtypes","keys","forEach","uniqueNames","field","baseType","encoder","push","primaryTypes","filter","n","t","checkCircular","found","child","subtype","primaryType","st","sort","_types","getEncoder","_encoderCache","_getEncoder","subEncoder","result","encodedType","values","unshift","encodeData","hashStruct","encode","hash","_visit","callback","reduce","accum","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","message"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@ethersproject/hash/src.ts/typed-data.ts"],"sourcesContent":["import { TypedDataDomain, TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { id } from \"./id\";\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst NegativeOne: BigNumber = BigNumber.from(-1);\nconst Zero: BigNumber = BigNumber.from(0);\nconst One: BigNumber = BigNumber.from(1);\nconst MaxUint256: BigNumber = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value: BytesLike) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return hexConcat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        if (typeof(value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        }\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value: any) {\n        try {\n            return BigNumber.from(value).toString()\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) { throw new Error(\"bad length\"); }\n            return hexlify(bytes);\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n}\n\nfunction getBaseEncoder(type: string): (value: any) => string {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1): width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne): Zero;\n\n            return function(value: BigNumberish) {\n                const v = BigNumber.from(value);\n\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${ type }`, \"value\", value);\n                }\n\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n\n            return function(value: BytesLike) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${ type }`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\nexport class TypedDataEncoder {\n    readonly primaryType: string;\n    readonly types: Record<string, Array<TypedDataField>>;\n\n    readonly _encoderCache: Record<string, (value: any) => string>;\n    readonly _types: Record<string, string>;\n\n    constructor(types: Record<string, Array<TypedDataField>>) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n\n        defineReadOnly(this, \"_encoderCache\", { });\n        defineReadOnly(this, \"_types\", { });\n\n        // Link struct types to their direct child structs\n        const links: Record<string, Record<string, boolean>> = { };\n\n        // Link structs to structs which contain them as a child\n        const parents: Record<string, Array<string>> = { };\n\n        // Link all subtypes within a given struct\n        const subtypes: Record<string, Record<string, boolean>> = { };\n\n        Object.keys(types).forEach((type) => {\n            links[type] = { };\n            parents[type] = [ ];\n            subtypes[type] = { }\n        });\n\n        for (const name in types) {\n\n            const uniqueNames: Record<string, boolean> = { };\n\n            types[name].forEach((field) => {\n\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { return ;}\n\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        } else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", types);\n        }\n\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Record<string, boolean>) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${ JSON.stringify(type) }`, \"types\", types);\n            }\n\n            found[type] = true;\n\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) { return; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n\n            delete found[type];\n        }\n        checkCircular(this.primaryType, { });\n\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n\n    _getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value: Array<any>) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(hexConcat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            }\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    encodeType(name: string): string {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        }\n        return result;\n    }\n\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v: any) => this._visit(subtype, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = shallowCopy(domain);\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof(value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}