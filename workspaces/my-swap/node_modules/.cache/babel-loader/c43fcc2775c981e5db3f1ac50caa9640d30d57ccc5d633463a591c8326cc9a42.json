{"ast":null,"code":"/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\n\n/*\r\n* Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n* a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n*/\nfunction toFormat(Ctor) {\n  'use strict';\n\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n     *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\n    if (!this.e && this.e !== 0) return this.toString(); // Infinity/NaN\n\n    var arr,\n      g1,\n      g2,\n      i,\n      u,\n      // undefined\n      nd,\n      // number of integer digits\n      intd,\n      // integer digits\n      intp,\n      // integer part\n      fracp,\n      // fraction part\n      dsep,\n      // decimalSeparator\n      gsep,\n      // groupSeparator\n      gsize,\n      // groupSize\n      sgsize,\n      // secondaryGroupSize\n      fgsep,\n      // fractionGroupSeparator\n      fgsize,\n      // fractionGroupSize\n      tfmt = this.format || {},\n      cfmt = this.constructor.format || {};\n    if (dp != u) {\n      if (typeof dp == 'object') {\n        fmt = dp;\n        dp = u;\n      } else if (rm != u) {\n        if (typeof rm == 'object') {\n          fmt = rm;\n          rm = u;\n        } else if (typeof fmt != 'object') {\n          fmt = {};\n        }\n      } else {\n        fmt = {};\n      }\n    } else {\n      fmt = {};\n    }\n    arr = this.toFixed(dp, rm).split('.');\n    intp = arr[0];\n    fracp = arr[1];\n    intd = this.s < 0 ? intp.slice(1) : intp;\n    nd = intd.length;\n    dsep = fmt.decimalSeparator;\n    if (dsep == u) {\n      dsep = tfmt.decimalSeparator;\n      if (dsep == u) {\n        dsep = cfmt.decimalSeparator;\n        if (dsep == u) dsep = '.';\n      }\n    }\n    gsep = fmt.groupSeparator;\n    if (gsep == u) {\n      gsep = tfmt.groupSeparator;\n      if (gsep == u) gsep = cfmt.groupSeparator;\n    }\n    if (gsep) {\n      gsize = fmt.groupSize;\n      if (gsize == u) {\n        gsize = tfmt.groupSize;\n        if (gsize == u) {\n          gsize = cfmt.groupSize;\n          if (gsize == u) gsize = 0;\n        }\n      }\n      sgsize = fmt.secondaryGroupSize;\n      if (sgsize == u) {\n        sgsize = tfmt.secondaryGroupSize;\n        if (sgsize == u) {\n          sgsize = cfmt.secondaryGroupSize;\n          if (sgsize == u) sgsize = 0;\n        }\n      }\n      if (sgsize) {\n        g1 = +sgsize;\n        g2 = +gsize;\n        nd -= g2;\n      } else {\n        g1 = +gsize;\n        g2 = +sgsize;\n      }\n      if (g1 > 0 && nd > 0) {\n        i = nd % g1 || g1;\n        intp = intd.substr(0, i);\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\n        if (g2 > 0) intp += gsep + intd.slice(i);\n        if (this.s < 0) intp = '-' + intp;\n      }\n    }\n    if (fracp) {\n      fgsep = fmt.fractionGroupSeparator;\n      if (fgsep == u) {\n        fgsep = tfmt.fractionGroupSeparator;\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\n      }\n      if (fgsep) {\n        fgsize = fmt.fractionGroupSize;\n        if (fgsize == u) {\n          fgsize = tfmt.fractionGroupSize;\n          if (fgsize == u) {\n            fgsize = cfmt.fractionGroupSize;\n            if (fgsize == u) fgsize = 0;\n          }\n        }\n        fgsize = +fgsize;\n        if (fgsize) {\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\n        }\n      }\n      return intp + dsep + fracp;\n    } else {\n      return intp;\n    }\n  };\n  Ctor.format = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0\n  };\n  return Ctor;\n}\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;","map":{"version":3,"names":["toFormat","Ctor","prototype","dp","rm","fmt","e","toString","arr","g1","g2","i","u","nd","intd","intp","fracp","dsep","gsep","gsize","sgsize","fgsep","fgsize","tfmt","format","cfmt","constructor","toFixed","split","s","slice","length","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","substr","fractionGroupSeparator","fractionGroupSize","replace","RegExp","module","exports"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/toformat/toFormat.js"],"sourcesContent":["/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}