{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n      return arrayify(value);\n    case \"string\":\n      return toUtf8Bytes(value);\n    case \"bytes\":\n      return arrayify(value);\n    case \"bool\":\n      value = value ? \"0x01\" : \"0x00\";\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n      return arrayify(value);\n  }\n  let match = type.match(regexNumber);\n  if (match) {\n    //let signed = (match[1] === \"int\")\n    let size = parseInt(match[2] || \"256\");\n    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n      logger.throwArgumentError(\"invalid number type\", \"type\", type);\n    }\n    if (isArray) {\n      size = 256;\n    }\n    value = BigNumber.from(value).toTwos(size);\n    return zeroPad(value, size / 8);\n  }\n  match = type.match(regexBytes);\n  if (match) {\n    const size = parseInt(match[1]);\n    if (String(size) !== match[1] || size === 0 || size > 32) {\n      logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n    }\n    if (arrayify(value).byteLength !== size) {\n      logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n    }\n    if (isArray) {\n      return arrayify((value + Zeros).substring(0, 66));\n    }\n    return value;\n  }\n  match = type.match(regexArray);\n  if (match && Array.isArray(value)) {\n    const baseType = match[1];\n    const count = parseInt(match[2] || String(value.length));\n    if (count != value.length) {\n      logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n    }\n    const result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return concat(result);\n  }\n  return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n  if (types.length != values.length) {\n    logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n  }\n  const tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n  return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n  return hashSha256(pack(types, values));\n}","map":{"version":3,"mappings":"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","names":["BigNumber","arrayify","concat","hexlify","zeroPad","keccak256","hashKeccak256","sha256","hashSha256","toUtf8Bytes","regexBytes","RegExp","regexNumber","regexArray","Zeros","Logger","version","logger","_pack","type","value","isArray","match","size","parseInt","String","throwArgumentError","from","toTwos","byteLength","substring","Array","baseType","count","length","result","forEach","push","pack","types","values","tight","index"],"sources":["/Users/carsonmccue/Desktop/CPSC-370_BTC_derivates_AI_Chapman/workspaces/my-swap/node_modules/@ethersproject/solidity/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nfunction _pack(type: string, value: any, isArray?: boolean): Uint8Array {\n    switch(type) {\n        case \"address\":\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\": \"0x00\");\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n    }\n\n    let match =  type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\")\n\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type)\n        }\n\n        if (isArray) { size = 256; }\n\n        value = BigNumber.from(value).toTwos(size);\n\n        return zeroPad(value, size / 8);\n    }\n\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type)\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${ type }`, \"value\", value)\n        }\n        if (isArray) { return arrayify((value + Zeros).substring(0, 66)); }\n        return value;\n    }\n\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${ type }`, \"value\", value)\n        }\n        const result: Array<Uint8Array> = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n\n    return logger.throwArgumentError(\"invalid type\", \"type\", type)\n}\n\n// @TODO: Array Enum\n\nexport function pack(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values)\n    }\n    const tight: Array<Uint8Array> = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n\nexport function keccak256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashKeccak256(pack(types, values));\n}\n\nexport function sha256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashSha256(pack(types, values));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}